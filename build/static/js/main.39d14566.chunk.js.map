{"version":3,"sources":["components/Authentication/Login.js","components/Authentication/Signup.js","components/interact.js","Pages/Homepage.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","Context/ChatProvider.js","contracts/frontend-interaction/multisig_dashboard.js","components/payment/MultiToken.js","components/payment/Nft.js","components/payment/PayToken.js","contracts/frontend-interaction/senderc20.js","contracts/frontend-interaction/Crowdfund_claim.js","contracts/frontend-interaction/Crowdfund_pledge.js","components/payment/RequestCrowd.js","components/payment/RequestToken.js","components/ScrollableChat.js","components/ChatLoading.js","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","eth1.png","contracts/frontend-interaction/priceFeed.js","components/Pay.js","contracts/frontend-interaction/SendNft.js","components/PayNft.js","components/PaymentChoice.js","crowd.webp","contracts/frontend-interaction/Crowdfund_launch.js","components/CrowdFunding.js","multisig.jpg","contracts/frontend-interaction/Multisig.js","contracts/frontend-interaction/Mutisig_confirm.js","contracts/frontend-interaction/Multisig_execute.js","components/Pay2.js","components/PayNft2.js","components/SingleChat.js","components/MultiSig.js","components/GroupPayment.js","components/miscellaneous/GroupBox1.js","components/Chatbox.js","contracts/frontend-interaction/OnCreate.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","logo.png","components/miscellaneous/profile.png","components/miscellaneous/Noti.js","contracts/frontend-interaction/FetchNoti.js","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js","App.js","reportWebVitals.js","index.js"],"names":["Login","props","useState","show","setShow","toast","useToast","password","setPassword","loading","setLoading","walletAddr","history","useHistory","submitHandler","title","status","duration","isClosable","position","config","headers","console","log","axios","post","trim","data","JSON","stringify","localStorage","setItem","push","description","spacing","id","isRequired","value","disabled","size","onChange","e","target","type","placeholder","width","h","onClick","color","bg","style","marginTop","isLoading","borderRadius","Signup","handleClick","confirmpassword","setConfirmpassword","pic","picLoading","setPicLoading","name","email","response","message","connectWallet","window","ethereum","request","method","params","chainId","addressArray","obj","address","Homepage","setWalletAddr","useEffect","parse","getItem","className","display","height","class","src","temp","maxW","centerContent","w","p","isFitted","variant","mb","_selected","isSameSenderMargin","messages","m","i","userId","length","sender","_id","isSameSender","undefined","isLastMessage","isSameUser","getSender","loggedUser","users","ProfileModal","user","children","useDisclosure","isOpen","onOpen","onClose","d","base","icon","colorScheme","_hover","isCentered","fontSize","fontFamily","justifyContent","flexDir","alignItems","boxSize","alt","md","ChatContext","createContext","ChatState","useContext","ChatProvider","selectedChat","setSelectedChat","setUser","notification","setNotification","chats","setChats","userInfo","Provider","ethers","require","index","Multisigabi","Multisigaddr","provider","providers","Web3Provider","send","contract_provider","Contract","gettxnlen","txnlen","parseInt","txlen","getTransaction","txndeets","fetchIndex","MultiToken","amount","content","currency","date","Date","to","note","user_id","label","sender_name","placement","hasArrow","mt","mr","cursor","sender_pic","backgroundColor","sender_id","marginLeft","padding","maxWidth","minWidth","getMonth","getDate","Nft","margin","PayToken","POSClient","use","Web3ClientPlugin","token_address","receiver_address","amount1","sender_address","contractabi","contractaddr","signer","getSigner","contract_signer","owner1","posClient","init","network","version","parent","defaultConfig","from","child","erc20Token","erc20","input0","utils","parseUnits","amounthex","hexlify","approve","spenderAddress","sendToken","gasLimit","senderc20","Crowdfund_launch_abi","Crowdfundaddr","claim","Crowdfund_claim","erc20abi","erc20_signer","pledge","Crowdfund_pledge","RequestCrowd","setAmount","pay_request","id2","claim_request","last","month","border","event","RequestToken","updateMessages","Authorization","token","messageId","refAgain","ScrollableChat","map","payment","chat_mode","payment_type","payment_mode","createdAt","split","ChatLoading","UserBadgeItem","handleFunction","admin","px","py","pl","UserListItem","key","substring","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","renameloading","setRenameLoading","handleSearch","query","get","handleRename","put","chatId","chatName","handleAddUser","user1","find","u","groupAdmin","handleRemove","flexWrap","pb","ml","PriceFeedabi","PriceFeedProvider","getLatestPrice","FetchPrice","Math","round","pow","priceFeed","socket","Pay","toClose","Moralis","setMessages","setCurrency","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","setIsTyping","setTokenAddress","setNote","owner_address","bal","setBal","usd","setUsd","sendMessage","emit","receiver_id","sendMessageReq","io","on","newMessageRecieved","includes","options","setOptions","EvmChain","chain","MUMBAI","EvmApi","getWalletTokenBalances","toJSON","options2","symbol","balance","result","_focus","outline","transform","zIndex","img","onSubmit","marginBottom","focusBorderColor","textAlign","lastTypingTime","getTime","setTimeout","fontStyle","marginRight","token_id","erc721abi","erc721_signer","SendNFT","sendnft","PayNft","imageUrl","setImageUrl","setTokenId","nft","getWalletNFTs","filter","metadata","image","PaymentChoice","backdropFilter","backdropBlur","days","launch","creator","goal","startedAt","endAt","info","Crowdfund_launch","CrowdFunding","setDate","sleep","time","Promise","resolve","sendMessage1","removeItem","floor","then","grp_multisig_address","submitTransaction","getBlockNumber","txindex","transferEvents","Multisig","confirmTransaction","Multisig_confirm","executeTransaction","Multisig_execute","selectedChatCompare","Pay2","setTo","confirm","setConfirm","execute","setExecute","setIndex","sendMessage2","sendMessage3","PayNft2","MultiSig","GroupPayment","GroupBox1","background","typeoftxn","numConfirmations","executed","SingleChat","istyping","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","chat","top","left","isGroupChat","overflowY","paddingTop","alignSelf","onKeyDown","borderColor","amountOrtokenid","Chatbox","overflow","contractAbi","contractByteCode","owners","number","owner","factory","ContractFactory","deploy","contract","OnCreate","GroupChatModal","selectedUsers","setSelectedUsers","handleSubmit","create_grp_user_list","element","delUser","sel","slice","userToAdd","MyChats","setLoggedUser","loadingChat","setLoadingChat","accessChat","c","fetchChats","lg","latestMessage","Noti","body","fetch","resp","json","FetchNoti","SideDrawer","notification2","setNotification2","img1","objectFit","feeds","payload","count","effect","Effect","SCALE","as","Button","rightIcon","Chatpage","App","default","start","apiKey","path","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.39d14566.chunk.js","sourcesContent":["import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst Login = (props) => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const [password, setPassword] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [walletAddr,setWalletAddr]=useState(props.walletAddr);\n\n  const history = useHistory();\n\n  \n\n  const submitHandler = async () => {\n    setLoading(true);\n\n    \n    \n    if (!walletAddr || !password) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n      return;\n    }\n\n    \n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n\n      console.log(\"pp\")\n\n     \n\n      const {data}  = await axios.post(\n        \"https://sake-backend.onrender.com/api/user/login\",\n        { \n    \n          \"email\":props.walletAddr.trim(),\n          \"password\":password\n          \n      \n       },\n        config\n      );\n\n      console.log(\"pp\")\n\n      console.log(JSON.stringify(data));\n      toast({\n        title: \"Login Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      console.log(data);\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      localStorage.setItem(\"address\", walletAddr);\n      \n      setLoading(false);\n      history.push(\"/chats\")\n      \n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n\n   \n  };\n\n  return (\n    <VStack spacing=\"10px\">\n      <FormControl id=\"email\" isRequired>\n        <FormLabel>Wallet Address</FormLabel>\n        <Input\n          value={props.walletAddr}\n          disabled\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter password\"\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick} color=\"black\"\n        bg=\"white\">\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <Button\n        color=\"black\"\n        bg=\"white\"\n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={loading}\n        borderRadius={\"20px\"}\n      >\n        Login\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Login;\n","\nimport { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router\";\n\nconst Signup = (props) => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const history = useHistory();\n  const[walletAddr,setWalletAddr]=useState(props.walletAddr);\n\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [confirmpassword, setConfirmpassword] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [pic, setPic] = useState();\n  const [picLoading, setPicLoading] = useState(false);\n\n  const submitHandler = async () => {\n    setPicLoading(true);\n    if (!walletAddr || !password || !confirmpassword) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n    if (password !== confirmpassword) {\n      toast({\n        title: \"Passwords Do Not Match\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    console.log(walletAddr, password, pic);\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n      const { data } = await axios.post(\n        \"https://sake-backend.onrender.com/api/user\",\n        {\n          name:walletAddr,\n          email:walletAddr,\n          password:password,\n          pic:pic,\n        },\n        config\n      );\n      console.log(data);\n      toast({\n        title: \"Registration Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setPicLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n    }\n  };\n\n  const postDetails = (pics) => {\n    setPicLoading(true);\n    if (pics === undefined) {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    console.log(pics);\n    if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\n      const data = new FormData();\n      data.append(\"file\", pics);\n      data.append(\"upload_preset\", \"chat-app\");\n      data.append(\"cloud_name\", \"piyushproj\");\n      fetch(\"https://api.cloudinary.com/v1_1/piyushproj/image/upload\", {\n        method: \"post\",\n        body: data,\n      })\n        .then((res) => res.json())\n        .then((data) => {\n          setPic(data.url.toString());\n          console.log(data.url.toString());\n          setPicLoading(false);\n        })\n        .catch((err) => {\n          console.log(err);\n          setPicLoading(false);\n        });\n    } else {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n  };\n\n  return (\n    <VStack spacing=\"5px\">\n      <FormControl id=\"first-name\" isRequired>\n        <FormLabel>Name</FormLabel>\n        <Input\n          value={walletAddr}\n          disabled\n        />\n      </FormControl>\n      <FormControl id=\"email\" isRequired>\n        <FormLabel>Wallet Address</FormLabel>\n        <Input\n          value={walletAddr}\n          disabled\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter Password\"\n            onChange={(e) => setPassword(e.target.value)}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick} color=\"black\"\n        bg=\"white\">\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Confirm Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Confirm password\"\n            onChange={(e) => setConfirmpassword(e.target.value)}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick} color=\"black\"\n        bg=\"white\">\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      {/* <FormControl id=\"pic\">\n        <FormLabel>Upload your Picture</FormLabel>\n        <Input\n          type=\"file\"\n          p={1.5}\n          accept=\"image/*\"\n          onChange={(e) => postDetails(e.target.files[0])}\n        />\n      </FormControl> */}\n      <Button\n        \n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={picLoading}\n        color=\"black\"\n        bg=\"white\"\n      >\n        Sign Up\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Signup;\n","// export const connectWallet = async () => {\n//   console.log(\"1\")\n//     if (window.ethereum) {\n//       try {\n//         const addressArray = await window.ethereum.request({\n//           method: \"eth_requestAccounts\",\n//         });\n//         const obj = {\n//           status: \"👆🏽 Write a message in the text-field above.\",\n//           address: addressArray[0],\n//         };\n//         return obj;\n//       } catch (err) {\n//         return {\n//           address: \"\",\n//           status: \"😥 \" + err.message,\n//         };\n//       }\n//     } \n//   };\n\nexport const connectWallet = async () => {\n  console.log(\"1\");\n  if (window.ethereum) {\n    try {\n      // Set the network to the Polygon testnet (Mumbai) using the chain ID\n      await window.ethereum.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{ chainId: \"0x13881\" }],\n      });\n\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n      const obj = {\n        status: \"👆🏽 Write a message in the text-field above.\",\n        address: addressArray[0],\n      };\n      return obj;\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message,\n      };\n    }\n  }\n};\n\n  export const getCurrentWalletConnected = async () => {\n    if (window.ethereum) {\n      try {\n        const addressArray = await window.ethereum.request({\n          method: \"eth_accounts\",\n        });\n        if (addressArray.length > 0) {\n          return {\n            address: addressArray[0],\n            status: \"👆🏽 Write a message in the text-field above.\",\n          };\n        } else {\n          return {\n            address: \"\",\n            status: \"🦊 Connect to Metamask using the top right button.\",\n          };\n        }\n      } catch (err) {\n        return {\n          address: \"\",\n          status: \"😥 \" + err.message,\n        };\n      }\n    } \n  };","import {\n  Box,\n  Container,\n  Tab,\n  TabList,\n  TabPanel,\n  TabPanels,\n  Tabs,\n  Text,\n} from \"@chakra-ui/react\";\nimport { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport Login from \"../components/Authentication/Login\";\nimport Signup from \"../components/Authentication/Signup\";\nimport \"./Homepage.css\";\n\nimport { connectWallet } from \"../components/interact\";\n\nfunction Homepage() {\n  const history = useHistory();\n  const [walletAddr, setWalletAddr] = useState(\"\");\n\n  //0xE7B0a0ca3443FF1C90E8f3d7fce8B58bd308ca5f-->sai\n  //0x0C9d33186f7D87A94cBA10F3083BB208A49c1647\n  //0x3103FF402aEbd5a7b6cF799aaAb076f5a21172b0-->account\n\n  useEffect(() => {\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\n\n    if (user) {\n      history.push(\"/chats\");\n    }\n  }, [history]);\n\n  return (\n    <>\n      <div\n        className={\"font1\"}\n        style={{ display: \"flex\", width: \"100%\", height: \"100vh\" }}\n      >\n        <div className=\"leftlogin\">\n          <img\n            class=\"metamask-fox\"\n            src={\"https://metamask.io/images/metamask-logo.png\"}\n          />\n        </div>\n        <div className=\"rightlogin\">\n          {walletAddr == \"\" && <p className=\"company\">Saké</p>}\n          {walletAddr == \"\" && <p className=\"company2\">Raise a Glass to Easy Chatting and Payments with Sake</p>}\n          {walletAddr == \"\" ? (\n            <div>\n              <button\n                className=\"connectBtn\"\n                onClick={async () => {\n                  const temp = await connectWallet();\n                  console.log(temp);\n                  setWalletAddr(temp.address);\n                  localStorage.setItem(\"address\", temp.address);\n                }}\n              >\n                connect wallet\n              </button>\n            </div>\n          ) : (\n            <Container maxW=\"xl\" centerContent>\n              <Box\n                bg=\"rgb(40,43,48)\"\n                w=\"100%\"\n                p={4}\n                borderRadius=\"lg\"\n                color=\"white\"\n                marginTop={\"40%\"}\n              >\n                <Tabs isFitted variant=\"soft-rounded\">\n                  <TabList mb=\"1em\">\n                    <Tab _selected={{ color: \"white\", bg: \"rgb(30,33,36)\" }}>\n                      Login\n                    </Tab>\n                    <Tab _selected={{ color: \"white\", bg: \"rgb(30,33,36)\" }}>\n                      Sign Up\n                    </Tab>\n                  </TabList>\n                  <TabPanels>\n                    <TabPanel>\n                      <Login walletAddr={walletAddr} />\n                    </TabPanel>\n                    <TabPanel>\n                      <Signup walletAddr={walletAddr} />\n                    </TabPanel>\n                  </TabPanels>\n                </Tabs>\n              </Box>\n            </Container>\n          )}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Homepage;\n","export const isSameSenderMargin = (messages, m, i, userId) => {\n  // console.log(i === messages.length - 1);\n\n  if (\n    i < messages.length - 1 &&\n    messages[i + 1].sender._id === m.sender._id &&\n    messages[i].sender._id !== userId\n  )\n    return 37;\n  else if (\n    (i < messages.length - 1 &&\n      messages[i + 1].sender._id !== m.sender._id &&\n      messages[i].sender._id !== userId) ||\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\n  )\n    return 0;\n  else return \"auto\";\n};\n\nexport const isSameSender = (messages, m, i, userId) => {\n  return (\n    i < messages.length - 1 &&\n    (messages[i + 1].sender._id !== m.sender._id ||\n      messages[i + 1].sender._id === undefined) &&\n    messages[i].sender._id !== userId\n  );\n};\n\nexport const isLastMessage = (messages, i, userId) => {\n  return (\n    i === messages.length - 1 &&\n    messages[messages.length - 1].sender._id !== userId &&\n    messages[messages.length - 1].sender._id\n  );\n};\n\nexport const isSameUser = (messages, m, i) => {\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\n};\n\nexport const getSender = (loggedUser, users) => {\n  if(users[0]!=undefined && loggedUser!=undefined){\n    return users[0]._id === loggedUser._id ? users[1].name : users[0].name;\n  }\n  return \"\";\n  \n};\n\nexport const getSenderFull = (loggedUser, users) => {\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\n};\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  IconButton,\n  Text,\n  Image,\n} from \"@chakra-ui/react\";\n\nconst ProfileModal = ({ user, children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      {children ? (\n        <span onClick={onOpen}>{children}</span>\n      ) : (\n        <IconButton\n          d={{ base: \"flex\" }}\n          icon={<ViewIcon />}\n          onClick={onOpen}\n          colorScheme=\"grey\"\n          _hover={{ bg: \"rgb(114,137,218)\" }}\n        />\n      )}\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent h=\"410px\">\n          <ModalHeader\n            fontSize=\"15px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {user.name}\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody\n            d=\"flex\"\n            flexDir=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n            \n          >\n            <Image\n              borderRadius=\"full\"\n              boxSize=\"150px\"\n              src={user.pic}\n              alt={user.name}\n            />\n            <Text\n              fontSize={{ base: \"20px\", md: \"20px\" }}\n              fontFamily=\"Work sans\"\n            >\n              Wallet Address: {user.email}\n            </Text>\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={onClose}>Close</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default ProfileModal;\n","import React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst ChatContext = createContext();\n\nconst ChatProvider = ({ children }) => {\n  const [selectedChat, setSelectedChat] = useState();\n  const [user, setUser] = useState();\n  const [notification, setNotification] = useState([]);\n  const [chats, setChats] = useState();\n\n  const history = useHistory();\n\n  useEffect(() => {\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n    setUser(userInfo);\n\n    if (!userInfo) history.push(\"/\");\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [history]);\n\n  return (\n    <ChatContext.Provider\n      value={{\n        selectedChat,\n        setSelectedChat,\n        user,\n        setUser,\n        notification,\n        setNotification,\n        chats,\n        setChats,\n      }}\n    >\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\nexport const ChatState = () => {\n  return useContext(ChatContext);\n};\n\nexport default ChatProvider;\n","const { ethers } = require(\"ethers\");\n\nasync function fetchIndex(index) {\n  const Multisigabi = require(\"../abi/Multisig.json\");\n  const Multisigaddr = \"0xb1e89A6F2eccf90b0c180f554323138F19ae0FC6\";\n\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  await provider.send(\"eth_requestAccounts\", []);\n\n  const contract_provider = new ethers.Contract(\n    Multisigaddr,\n    Multisigabi,\n    provider\n  );\n\n  const txnlen = await contract_provider.gettxnlen();\n  const len = parseInt(\"\" + txnlen.txlen, 16);\n  console.log(txnlen);\n\n  const txndeets = await contract_provider.getTransaction(index);\n  return txndeets;\n}\n\nexport default fetchIndex;\n","import { React } from \"react\";\nimport { Avatar } from \"@chakra-ui/avatar\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport ScrollableFeed from \"react-scrollable-feed\";\nimport {\n  isLastMessage,\n  isSameSender,\n  isSameSenderMargin,\n  isSameUser,\n} from \"../../config/ChatLogics\";\nimport \"../Pay.css\";\n\nconst MultiToken = (props) => {\n  var amount = props.content;\n  var status = props.currency;\n  var date = new Date(props.date);\n  var to = props.to;\n  var note = props.note;\n  const month = [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ];\n\n  return (\n    <div style={{ display: \"flex\" }} key={props.id}>\n      {(isSameSender(props.messages, props.m, props.i, props.user_id) ||\n        isLastMessage(props.messages, props.i, props.user_id)) && (\n        <Tooltip label={props.sender_name} placement=\"bottom-start\" hasArrow>\n          <Avatar\n            mt=\"7px\"\n            mr={1}\n            size=\"sm\"\n            cursor=\"pointer\"\n            name={props.sender_name}\n            src={props.sender_pic}\n          />\n        </Tooltip>\n      )}\n      <div\n        style={{\n          backgroundColor: `${\n            props.sender_id === props.user_id\n              ? \"rgb(54,57,62)\"\n              : \"rgb(40,43,48)\"\n          }`,\n          marginLeft: isSameSenderMargin(\n            props.messages,\n            props.m,\n            props.i,\n            props.user_id\n          ),\n          marginTop: isSameUser(props.messages, props.m, props.i, props.user_id)\n            ? 7\n            : 10,\n          borderRadius: \"20px\",\n          padding: \"5px 15px\",\n          maxWidth: \"75%\",\n          minWidth: \"260px\",\n          color: \"white\",\n          height: status == \"submitted txn\"?\"185px\":\"100px\",\n        }}\n      >\n        <p class=\"payment_user\">MultiSig</p>\n        {status == \"submitted txn\" && <p class=\"payment_user\">To:{amount}</p>}\n\n        {status == \"submitted txn\" && <p class=\"payment_note\">{note}</p>}\n\n        <p class=\"payment_user\">Transaction index:{to}</p>\n        <div style={{ display: \"flex\" }}>\n          {status == \"executed txn\" && (\n            <p class=\"payment_status\">{status}&ensp;&ensp;</p>\n          )}\n          {status != \"executed txn\" && (\n            <p class=\"payment_status\" style={{color:\"rgb(255, 223, 64)\"}}>{status}&ensp;&ensp;</p>\n          )}\n          <p class=\"payment_date\">\n            {month[date.getMonth()]}&ensp;{date.getDate()}\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MultiToken;\n","import { React } from \"react\";\nimport { Avatar } from \"@chakra-ui/avatar\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport ScrollableFeed from \"react-scrollable-feed\";\nimport {\n  isLastMessage,\n  isSameSender,\n  isSameSenderMargin,\n  isSameUser,\n} from \"../../config/ChatLogics\";\nimport \"../Pay.css\";\n\nconst Nft = (props) => {\n  \n  var amount = props.content;\n  var status = \"send\";\n  var date = new Date(props.date);\n  var note = props.note;\n  const month=[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"]\n\n  return (\n    <div style={{ display: \"flex\" }} key={props.id}>\n      {(isSameSender(props.messages, props.m, props.i, props.user_id) ||\n        isLastMessage(props.messages, props.i, props.user_id)) && (\n        <Tooltip label={props.sender_name} placement=\"bottom-start\" hasArrow>\n          <Avatar\n            mt=\"7px\"\n            mr={1}\n            size=\"sm\"\n            cursor=\"pointer\"\n            name={props.sender_name}\n            src={props.sender_pic}\n          />\n        </Tooltip>\n      )}\n      <div\n        style={{\n          backgroundColor: `${\n            props.sender_id === props.user_id\n              ? \"rgb(54,57,62)\"\n              : \"rgb(40,43,48)\"\n          }`,\n          marginLeft: isSameSenderMargin(\n            props.messages,\n            props.m,\n            props.i,\n            props.user_id\n          ),\n          marginTop: isSameUser(props.messages, props.m, props.i, props.user_id)\n            ? 7\n            : 10,\n          borderRadius: \"20px\",\n          padding: \"5px 15px\",\n          maxWidth: \"75%\",\n          minWidth: \"260px\",\n          color: \"white\",\n          height: \"250px\",\n        }}\n      >\n        <p class=\"payment_user\">NFT transfer</p>\n        <img src={note} style={{\"width\":\"auto\",\"height\":\"150px\",\"objectFit\":\"contain\",margin:\"10px auto\"}}></img>\n        <div style={{ display: \"flex\" }}>\n          {props.sender_id === props.user_id && (<p class=\"payment_status\">Sent&ensp;&ensp;</p>)}\n          {props.sender_id != props.user_id && (<p class=\"payment_status\">Received&ensp;&ensp;</p>)}\n          <p class=\"payment_date\">{month[date.getMonth()]}&ensp;{date.getDate()}</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Nft;\n","import { React } from \"react\";\nimport { Avatar } from \"@chakra-ui/avatar\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport ScrollableFeed from \"react-scrollable-feed\";\nimport {\n  isLastMessage,\n  isSameSender,\n  isSameSenderMargin,\n  isSameUser,\n} from \"../../config/ChatLogics\";\nimport \"../Pay.css\";\n\nconst PayToken = (props) => {\n  var receiver = \"karupaiya\";\n  var amount = props.content;\n  var status = \"Paid\";\n  var date = new Date(props.date);\n  var note = props.note;\n  const month=[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"]\n\n  return (\n    <div style={{ display: \"flex\" }} key={props.id}>\n      {(isSameSender(props.messages, props.m, props.i, props.user_id) ||\n        isLastMessage(props.messages, props.i, props.user_id)) && (\n        <Tooltip label={props.sender_name} placement=\"bottom-start\" hasArrow>\n          <Avatar\n            mt=\"7px\"\n            mr={1}\n            size=\"sm\"\n            cursor=\"pointer\"\n            name={props.sender_name}\n            src={props.sender_pic}\n          />\n        </Tooltip>\n      )}\n      <div\n        style={{\n          backgroundColor: `${\n            props.sender_id === props.user_id\n              ? \"rgb(54,57,62)\"\n              : \"rgb(40,43,48)\"\n          }`,\n          marginLeft: isSameSenderMargin(\n            props.messages,\n            props.m,\n            props.i,\n            props.user_id\n          ),\n          marginTop: isSameUser(props.messages, props.m, props.i, props.user_id)\n            ? 7\n            : 10,\n          borderRadius: \"20px\",\n          padding: \"5px 15px\",\n          maxWidth: \"75%\",\n          minWidth: \"260px\",\n          color: \"white\",\n          height: \"185px\",\n        }}\n      >\n        <p class=\"payment_user\">Token Transfer</p>\n        <p class=\"payment_note\">{note}</p>\n\n        <p class=\"payment_amount\">\n          {amount}\n          <span className=\"payment_currency\">{props.currency}</span>\n        </p>\n\n        <div style={{ display: \"flex\" }}>\n          <p class=\"payment_status\">{status}&ensp;&ensp;</p>\n          <p class=\"payment_date\">{month[date.getMonth()]}&ensp;{date.getDate()}</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PayToken;\n","const { ethers} = require(\"ethers\");\nconst { POSClient, use } = require(\"@maticnetwork/maticjs\");\nconst { Web3ClientPlugin } = require(\"@maticnetwork/maticjs-ethers\");\n\n\n\nasync function senderc20(token_address,receiver_address,amount1,sender_address,note) {\n  const contractabi = require(\"../abi/senderc20.json\");\n  const contractaddr = \"0xAAEFCa53e21E85C00B1Db5090fF2EC275b6d4D90\";\n\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  await provider.send(\"eth_requestAccounts\", []);\n  const signer = provider.getSigner();\n\n  const contract_signer = new ethers.Contract(\n    contractaddr,\n    contractabi,\n    signer\n  );\n\n  const owner1 = sender_address;\n\n  console.log(\"1\");\n  use(Web3ClientPlugin);\n\n  const posClient = new POSClient();\n  await posClient.init({\n    network: \"testnet\",\n    version: \"mumbai\",\n    parent: {\n      provider: signer,\n      defaultConfig: {\n        from: owner1,\n      },\n    },\n    child: {\n      provider: signer,\n      defaultConfig: {\n        from: owner1,\n      },\n    },\n  });\n  console.log(\"2\");\n\n  \n  const erc20Token = posClient.erc20(token_address, true);\n  const input0 = \"\"+amount1;\n  const decimals0 = \"18\";\n  const amount = ethers.utils.parseUnits(input0, decimals0);\n  const amounthex = ethers.utils.hexlify(amount);\n  const approveResult = await erc20Token.approve(amounthex, {\n    spenderAddress: contractaddr,\n  });\n  console.log(\"3\");\n\n  \n  const senderc20 = await contract_signer.sendToken(token_address,receiver_address,amount,note,{gasLimit: 210000});\n}\n\nexport default senderc20;\n","const { ethers} = require(\"ethers\");\nasync function  Crowdfund_claim(id){\n    \n    const Crowdfund_launch_abi = require(\"../abi/Crowdfunding.json\")\n   \n    const Crowdfundaddr = \"0x81e49Fde3A9306c60727a707e1Fa5820671D271B\";\n\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n  await provider.send(\"eth_requestAccounts\", []);\n  const signer = provider.getSigner();\n\n  const contract_signer = new ethers.Contract(\n    Crowdfundaddr,\n    Crowdfund_launch_abi,\n    signer\n  );\n\n \n\n\n\n  \n  const claim =await contract_signer.claim(id,{gasLimit: 210000})\n//   const confirmtxn  = await contract_signer.confirmTransaction()\n//   const executetxn  = await contract_signer.executeTransaction()\n\n\n\n}\n\n\n\nexport default Crowdfund_claim;","const { ethers} = require(\"ethers\");\nasync function  Crowdfund_pledge(id,amount,token_address){\n\n    \n\n   \n    \n    const Crowdfund_launch_abi = require(\"../abi/Crowdfunding.json\")\n    const erc20abi=require(\"../abi/IERC20.json\")\n    const Crowdfundaddr = \"0x81e49Fde3A9306c60727a707e1Fa5820671D271B\";\n\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n  await provider.send(\"eth_requestAccounts\", []);\n  const signer = provider.getSigner();\n\n  const contract_signer = new ethers.Contract(\n    Crowdfundaddr,\n    Crowdfund_launch_abi,\n    signer\n  );\n\n  const erc20_signer = new ethers.Contract(\n    token_address,\n    erc20abi,\n    signer\n  );\n  const contract_provider = new ethers.Contract(\n    Crowdfundaddr,\n    Crowdfund_launch_abi,\n    provider\n  );\n\n  const input0 = \"\"+amount;\n  const decimals0 = \"18\";\n  const amount1 = ethers.utils.parseUnits(input0, decimals0);\n\n\n  const approvetoken= await erc20_signer.approve(Crowdfundaddr,amount1)\n\n  \n  const pledge =await contract_signer.pledge(id,amount1,{gasLimit: 210000})\n//   const confirmtxn  = await contract_signer.confirmTransaction()\n//   const executetxn  = await contract_signer.executeTransaction()\n\n\n\n}\n\n\n\nexport default Crowdfund_pledge;","import { React, Input, useState } from \"react\";\nimport { Avatar } from \"@chakra-ui/avatar\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport ScrollableFeed from \"react-scrollable-feed\";\nimport {\n  isLastMessage,\n  isSameSender,\n  isSameSenderMargin,\n  isSameUser,\n} from \"../../config/ChatLogics\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport \"../Pay.css\";\nimport axios from \"axios\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport senderc20 from \"../../contracts/frontend-interaction/senderc20\";\nimport Crowdfund_claim from \"../../contracts/frontend-interaction/Crowdfund_claim\";\nimport Crowdfund_pledge from \"../../contracts/frontend-interaction/Crowdfund_pledge\";\n\nconst RequestCrowd = (props) => {\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\n    ChatState();\n\n  const toast = useToast();\n\n  const [amount, setAmount] = useState(\"\");\n\n  const pay_request = async () => {\n    await Crowdfund_pledge(props.id2, props.content, props.token_address);\n  };\n\n  const claim_request = async () => {\n    await Crowdfund_claim(props.id2);\n  };\n\n  const updateMessages = async () => {\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      console.log(\"updating\" + props.id);\n      const { data } = await axios.post(\n        `https://sake-backend.onrender.com/api/message/update`,\n        {\n          messageId: props.id,\n        },\n        config\n      );\n      console.log(\"updating\");\n      console.log(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n    props.refAgain();\n  };\n\n  var receiver = \"karupaiya\";\n\n  var status = \"Requested\";\n  var date = new Date(props.date);\n  var last = new Date(props.last);\n  var note = props.note;\n  const month = [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ];\n\n  return (\n    <div style={{ display: \"flex\" }} key={props.id}>\n      {(isSameSender(props.messages, props.m, props.i, props.user_id) ||\n        isLastMessage(props.messages, props.i, props.user_id)) && (\n        <Tooltip label={props.sender_name} placement=\"bottom-start\" hasArrow>\n          <Avatar\n            mt=\"7px\"\n            mr={1}\n            size=\"sm\"\n            cursor=\"pointer\"\n            name={props.sender_name}\n            src={props.sender_pic}\n          />\n        </Tooltip>\n      )}\n      <div\n        style={{\n          backgroundColor: `${\n            props.sender_id === props.user_id\n              ? \"rgb(54,57,62)\"\n              : \"rgb(40,43,48)\"\n          }`,\n          marginLeft: isSameSenderMargin(\n            props.messages,\n            props.m,\n            props.i,\n            props.user_id\n          ),\n          marginTop: isSameUser(props.messages, props.m, props.i, props.user_id)\n            ? 7\n            : 10,\n          borderRadius: \"20px\",\n          padding: \"5px 15px\",\n          maxWidth: \"75%\",\n          minWidth: \"260px\",\n          color: \"white\",\n          height: \"220px\",\n        }}\n      >\n        <p class=\"payment_user\">CrowdFunding</p>\n        <p class=\"payment_note\">{note}</p>\n\n        {!(props.sender_id === props.user_id) && (\n          <div\n            style={{\n              width: \"100%\",\n              display:\"flex\"\n            }}\n          >\n            <input\n              type=\"text\"\n              style={{\n                width:\"30%\",\n                height: \"40px\",\n                backgroundColor: \"transparent\",\n                border: \"1px solid grey\",\n                borderRadius: \"10px\",\n                margin:\"0px\",\n                color:\"white\"\n              }}\n              onChange={(event) => {\n                setAmount(event.target.value);\n              }}\n              value={amount}\n            />\n            <span className=\"payment_currency\">{props.currency}</span>\n          </div>\n        )}\n        {props.sender_id === props.user_id && (\n          <p className=\"payment_amount\">\n            {props.content}\n            <span className=\"payment_currency\">{props.currency}</span>\n          </p>\n        )}\n        <div style={{ display: \"flex\" }}>\n          <p class=\"payment_status\" style={{ color: \"rgb(255, 223, 64)\" }}>\n            {month[last.getMonth()]}&ensp;{last.getDate()}&ensp;&ensp;\n          </p>\n          <p class=\"payment_date\">\n            {month[date.getMonth()]}&ensp;{date.getDate()}\n          </p>\n        </div>\n        <div>\n          {!(props.sender_id === props.user_id) && (\n            <button\n              class={\"pay_btn\"}\n              onClick={() => {\n                pay_request();\n              }}\n            >\n              pay\n            </button>\n          )}\n          {props.sender_id === props.user_id && (\n            <button\n              class={\"pay_btn\"}\n              onClick={() => {\n                claim_request();\n              }}\n            >\n              claim\n            </button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RequestCrowd;\n","import { React } from \"react\";\nimport { Avatar } from \"@chakra-ui/avatar\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport ScrollableFeed from \"react-scrollable-feed\";\nimport {\n  isLastMessage,\n  isSameSender,\n  isSameSenderMargin,\n  isSameUser,\n} from \"../../config/ChatLogics\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport \"../Pay.css\";\nimport axios from \"axios\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport senderc20 from \"../../contracts/frontend-interaction/senderc20\";\n\nconst RequestToken = (props) => {\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\n    ChatState();\n\n  const toast = useToast();\n\n  const pay_request = async() => {\n    console.log(props.token_address + \" \" + props.sender_id + \" \" + props.content);\n    await senderc20(\n      props.token_address,\n      props.sender_id,\n      props.content,\n      localStorage.getItem(\"address\"),\n      \"\"\n    );\n\n  };\n\n  const updateMessages = async () => {\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      console.log(\"updating\" + props.id);\n      const { data } = await axios.post(\n        `https://sake-backend.onrender.com/api/message/update`,\n        {\n          messageId: props.id,\n        },\n        config\n      );\n      console.log(\"updating\");\n      console.log(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n    props.refAgain();\n  };\n\n  var receiver = \"karupaiya\";\n  var amount = props.content;\n  var status = \"Requested\";\n  var date = new Date(props.date);\n  var note = props.note;\n  const month=[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"]\n\n  return (\n    <div style={{ display: \"flex\" }} key={props.id}>\n      {(isSameSender(props.messages, props.m, props.i, props.user_id) ||\n        isLastMessage(props.messages, props.i, props.user_id)) && (\n        <Tooltip label={props.sender_name} placement=\"bottom-start\" hasArrow>\n          <Avatar\n            mt=\"7px\"\n            mr={1}\n            size=\"sm\"\n            cursor=\"pointer\"\n            name={props.sender_name}\n            src={props.sender_pic}\n          />\n        </Tooltip>\n      )}\n      <div\n        style={{\n          backgroundColor: `${\n            props.sender_id === props.user_id\n              ? \"rgb(54,57,62)\"\n              : \"rgb(40,43,48)\"\n          }`,\n          marginLeft: isSameSenderMargin(\n            props.messages,\n            props.m,\n            props.i,\n            props.user_id\n          ),\n          marginTop: isSameUser(props.messages, props.m, props.i, props.user_id)\n            ? 7\n            : 10,\n            borderRadius: \"20px\",\n            padding: \"5px 15px\",\n            maxWidth: \"75%\",\n            minWidth: \"260px\",\n            color: \"white\",\n            height: \"215px\",\n        }}\n      >\n        <p class=\"payment_user\">Token Transfer</p>\n        <p class=\"payment_note\">{note}</p>\n        <p class=\"payment_amount\">\n          {amount}\n          <span className=\"payment_currency\">{props.currency}</span>\n        </p>\n        <div style={{ display: \"flex\" }}>\n          <p class=\"payment_status\" style={{\"color\":\"rgb(255, 223, 64)\"}}>{status}&ensp;&ensp;</p>\n          <p class=\"payment_date\">{month[date.getMonth()]}&ensp;{date.getDate()}</p>\n        </div>\n        <div>\n          {!(props.sender_id === props.user_id) && (\n            <button\n              class={\"pay_btn\"}\n              onClick={() => {\n                updateMessages();\n                pay_request();\n              }}\n            >\n              pay\n            </button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RequestToken;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport { useEffect } from \"react\";\nimport ScrollableFeed from \"react-scrollable-feed\";\nimport {\n  isLastMessage,\n  isSameSender,\n  isSameSenderMargin,\n  isSameUser,\n} from \"../config/ChatLogics\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport fetchIndex from \"../contracts/frontend-interaction/multisig_dashboard\";\nimport \"./Pay.css\";\nimport MultiToken from \"./payment/MultiToken\";\nimport Nft from \"./payment/Nft\";\nimport PayToken from \"./payment/PayToken\";\nimport RequestCrowd from \"./payment/RequestCrowd\";\nimport RequestToken from \"./payment/RequestToken\";\n\nconst ScrollableChat = ({ messages, refAgain }) => {\n  const { user } = ChatState();\n\n  \n\n  return (\n    <ScrollableFeed>\n      {messages &&\n        messages.map((m, i) =>\n          m.payment ? (\n            m.chat_mode == \"private\" ? (\n              m.payment_type == \"token\" ? (\n                m.payment_mode == \"request\" ? (\n                  <RequestToken\n                    sender_name={m.sender.name}\n                    sender_pic={m.sender.pic}\n                    sender_id={m.sender._id}\n                    content={m.content}\n                    id={m._id}\n                    messages={messages}\n                    m={m}\n                    i={i}\n                    user_id={user._id}\n                    refAgain={refAgain}\n                    note={m.note}\n                    currency={m.currency}\n                    token_address={m.token_address}\n                    date={m.createdAt}\n                  ></RequestToken>\n                ) : (\n                  <PayToken\n                    sender_name={m.sender.name}\n                    sender_pic={m.sender.pic}\n                    sender_id={m.sender._id}\n                    content={m.content}\n                    id={m._id}\n                    messages={messages}\n                    m={m}\n                    i={i}\n                    user_id={user._id}\n                    note={m.note}\n                    currency={m.currency}\n                    date={m.createdAt}\n                  ></PayToken>\n                )\n              ) : (\n                <Nft\n                  sender_name={m.sender.name}\n                  sender_pic={m.sender.pic}\n                  sender_id={m.sender._id}\n                  content={m.content}\n                  id={m._id}\n                  messages={messages}\n                  m={m}\n                  i={i}\n                  user_id={user._id}\n                  note={m.note}\n                  currency={m.currency}\n                  date={m.createdAt}\n                ></Nft>\n              )\n            ) : m.payment_type == \"token\" ? (\n              <MultiToken\n                sender_name={m.sender.name}\n                sender_pic={m.sender.pic}\n                sender_id={m.sender._id}\n                content={m.content}\n                id={m._id}\n                messages={messages}\n                m={m}\n                i={i}\n                user_id={user._id}\n                note={m.note}\n                currency={m.currency}\n                date={m.createdAt}\n                to={m.token_address}\n              ></MultiToken>\n            ) : m.payment_type == \"NFT\" ? (\n              <Nft\n                sender_name={m.sender.name}\n                sender_pic={m.sender.pic}\n                sender_id={m.sender._id}\n                content={m.content}\n                id={m._id}\n                messages={messages}\n                m={m}\n                i={i}\n                user_id={user._id}\n                note={m.note}\n                currency={m.currency}\n                date={m.createdAt}\n              ></Nft>\n            ) : (\n              <RequestCrowd\n                sender_name={m.sender.name}\n                sender_pic={m.sender.pic}\n                sender_id={m.sender._id}\n                content={m.content.split(\"|\")[0]}\n                id={m._id}\n                messages={messages}\n                m={m}\n                i={i}\n                user_id={user._id}\n                note={m.note}\n                currency={m.currency}\n                date={m.createdAt}\n                to={m.token_address}\n                last={m.payment_mode}\n                id2={m.content.split(\"|\")[1]}\n                token_address={m.token_address}\n              />\n            )\n          ) : (\n            <div style={{ display: \"flex\" }} key={m._id}>\n              {(isSameSender(messages, m, i, user._id) ||\n                isLastMessage(messages, i, user._id)) && (\n                <Tooltip\n                  label={m.sender.name}\n                  placement=\"bottom-start\"\n                  hasArrow\n                >\n                  <Avatar\n                    mt=\"7px\"\n                    mr={1}\n                    size=\"sm\"\n                    cursor=\"pointer\"\n                    name={m.sender.name}\n                    src={m.sender.pic}\n                  />\n                </Tooltip>\n              )}\n              <span\n                style={{\n                  backgroundColor: `${\n                    m.sender._id === user._id\n                      ? \"rgb(54,57,62)\"\n                      : \"rgb(40,43,48)\"\n                  }`,\n                  marginLeft: isSameSenderMargin(messages, m, i, user._id),\n                  marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\n                  borderRadius: \"20px\",\n                  padding: \"5px 15px\",\n                  maxWidth: \"75%\",\n                  color: \"white\",\n                }}\n              >\n                {m.content}\n              </span>\n            </div>\n          )\n        )}\n    </ScrollableFeed>\n  );\n};\n\nexport default ScrollableChat;\n","import { Stack } from \"@chakra-ui/layout\";\nimport { Skeleton } from \"@chakra-ui/skeleton\";\n\nconst ChatLoading = () => {\n  return (\n    <Stack>\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n    </Stack>\n  );\n};\n\nexport default ChatLoading;\n","import { CloseIcon } from \"@chakra-ui/icons\";\nimport { Badge } from \"@chakra-ui/layout\";\n\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\n  return (\n    <Badge\n      px={2}\n      py={1}\n      borderRadius=\"lg\"\n      m={1}\n      mb={2}\n      variant=\"solid\"\n      fontSize={12}\n      colorScheme=\"purple\"\n      cursor=\"pointer\"\n      onClick={handleFunction}\n    >\n      {user.name}\n      {admin === user._id && <span> (Admin)</span>}\n      <CloseIcon pl={1} />\n    </Badge>\n  );\n};\n\nexport default UserBadgeItem;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nconst UserListItem = ({ handleFunction ,key,user}) => {\n \n\n  return (\n    <Box\n      onClick={handleFunction}\n      cursor=\"pointer\"\n      bg=\"rgb(54,57,62)\"\n      _hover={{ bg: \"#e2b2ff;\", color: \"black\" }}\n      w=\"100%\"\n      d=\"flex\"\n      alignItems=\"center\"\n      color=\"white\"\n      px={3}\n      py={2}\n      mb={2}\n      borderRadius=\"lg\"\n    >\n      <Avatar\n        mr={2}\n        size=\"sm\"\n        cursor=\"pointer\"\n        name={user.name}\n        src={user.pic}\n      />\n      <Box>\n        <Text>{user.name.substring(0,8)+\".....\"+user.name.substring(user.name.length-8)}</Text>\n      </Box>\n    </Box>\n  );\n};\n\nexport default UserListItem;\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n  IconButton,\n  Spinner,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [renameloading, setRenameLoading] = useState(false);\n  const toast = useToast();\n\n  const { selectedChat, setSelectedChat, user } = ChatState();\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`https://sake-backend.onrender.com/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n      setLoading(false);\n    }\n  };\n\n  const handleRename = async () => {\n    if (!groupChatName) return;\n\n    try {\n      setRenameLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `https://sake-backend.onrender.com/api/chat/rename`,\n        {\n          chatId: selectedChat._id,\n          chatName: groupChatName,\n        },\n        config\n      );\n\n      console.log(data._id);\n      // setSelectedChat(\"\");\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setRenameLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setRenameLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleAddUser = async (user1) => {\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\n      toast({\n        title: \"User Already in group!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    if (selectedChat.groupAdmin._id !== user._id) {\n      toast({\n        title: \"Only admins can add someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `https://sake-backend.onrender.com/api/chat/groupadd`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleRemove = async (user1) => {\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\n      toast({\n        title: \"Only admins can remove someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `https://sake-backend.onrender.com/api/chat/groupremove`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      fetchMessages();\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  return (\n    <>\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} colorScheme='black'/>\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {selectedChat.chatName}\n          </ModalHeader>\n\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\n              {selectedChat.users.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  admin={selectedChat.groupAdmin}\n                  handleFunction={() => handleRemove(u)}\n                />\n              ))}\n            </Box>\n            <FormControl d=\"flex\">\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                value={groupChatName}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n              <Button\n                variant=\"solid\"\n                colorScheme=\"teal\"\n                ml={1}\n                isLoading={renameloading}\n                onClick={handleRename}\n              >\n                Update\n              </Button>\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add User to group\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n\n            {loading ? (\n              <Spinner size=\"lg\" />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => handleAddUser(user)}\n                />\n              ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\n              Leave Group\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default UpdateGroupChatModal;\n","export default __webpack_public_path__ + \"static/media/eth1.fae2a62a.png\";","const { ethers} = require(\"ethers\");\nasync function priceFeed(){\n    const PriceFeedabi = require(\"../abi/price_feed.json\")\n  const PriceFeedaddr = \"0x6e54346BF13e3B9eED79083b5CD268ae4331cf0B\";\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n\n   const PriceFeedProvider = new ethers.Contract(PriceFeedaddr,PriceFeedabi,provider)\n   const AggregatorV3addr=\"0x1C2252aeeD50e0c9B64bDfF2735Ee3C932F5C408\"\n   const FetchPrice=await PriceFeedProvider.getLatestPrice(AggregatorV3addr)\n   \n   return Math.round((Math.pow(10,-8)*FetchPrice)*1000)/1000;\n\n}\n\nexport default priceFeed;","import { React } from \"react\";\nimport \"./Pay.css\";\nimport { FaDollarSign } from \"react-icons/fa\";\nimport {\n  Input,\n  InputGroup,\n  InputLeftElement,\n  InputRightElement,\n} from \"@chakra-ui/input\";\nimport img from \"../eth1.png\";\nimport { BsArrowRight } from \"react-icons/bs\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  Text,\n  Image,\n  Select,\n  useStyles,\n} from \"@chakra-ui/react\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Box } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport \"./SingleChat.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\nimport priceFeed from \"../contracts/frontend-interaction/priceFeed\";\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nimport senderc20 from \"../contracts/frontend-interaction/senderc20\";\n\nconst ENDPOINT = \"https://sake-backend.onrender.com\";  // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\nvar socket, selectedChatCompare;\n\nconst Pay = ({\n  fetchAgain,\n  setFetchAgain,\n  fetchMessages,\n  refAgain,\n  toClose,\n  Moralis,\n  sender_id,\n}) => {\n  const [messages, setMessages] = useState([]);\n  const [currency, setCurrency] = useState(\"\");\n  const [payment_type, setPaymentType] = useState(\"token\");\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n  const [chain, setChain] = useState(\"\");\n  const [token_address, setTokenAddress] = useState(\"\");\n  const [note, setNote] = useState(\"\");\n  const [owner_address, setOwner_address] = useState(\n   localStorage.getItem(\"address\")\n  );\n  const [bal, setBal] = useState(\"\");\n  const [usd, setUsd] = useState(0);\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\n    ChatState();\n\n  const sendMessage = async (event) => \n  {\n    await senderc20(\n      token_address,\n      sender_id,\n      newMessage,\n      localStorage.getItem(\"address\"),\n      note\n    );\n\n    //console.log(token_address+\" \"+sender_id+\" \"+newMessage);\n\n    if (newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        console.log(newMessage + \" \" + selectedChat);\n        const { data } = await axios.post(\n          \"https://sake-backend.onrender.com/api/message\",\n          {\n            content: newMessage,\n            chatId: selectedChat,\n            payment: true,\n            payment_mode: \"pay\",\n            chat_mode: \"private\",\n            payment_type: payment_type,\n            currency: currency,\n            receiver_id: sender_id,\n            note: note,\n            token_address: token_address,\n          },\n          config\n        );\n        console.log(data);\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n      refAgain();\n    }\n  };\n\n  const sendMessageReq = async (event) => {\n    if (newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        console.log(newMessage + \" \" + selectedChat);\n        const { data } = await axios.post(\n          \"https://sake-backend.onrender.com/api/message\",\n          {\n            content: newMessage,\n            chatId: selectedChat,\n            payment: true,\n            payment_mode: \"request\",\n            chat_mode: \"private\",\n            payment_type: payment_type,\n            currency: currency,\n            receiver_id: owner_address,\n            note: note,\n            token_address: token_address,\n          },\n          config\n        );\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n      refAgain();\n    }\n  };\n\n  const typingHandler = (e) => {\n    setNewMessage(e.target.value);\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n    console.log(socket);\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    socket.on(\"message recieved\", (newMessageRecieved) => {\n      if (\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\n        selectedChatCompare._id !== newMessageRecieved.chat._id\n      ) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  const [options, setOptions] = useState([]);\n\n  useEffect(async () => {\n    const { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\n    const address = localStorage.getItem(\"address\");\n\n    const chain = EvmChain.MUMBAI;\n\n    if (Moralis != undefined) {\n      const response = await Moralis.EvmApi.token.getWalletTokenBalances({\n        address,\n        chain,\n      });\n\n      console.log(response.toJSON());\n      setOptions(response.toJSON());\n    }\n  }, [Moralis]);\n\n  const options2 = options.map((d) => {\n    return (\n      <option\n        className=\"font1\"\n        value={\n          d.symbol + \"|\" + d.token_address + \"|\" + Math.pow(10, -18) * d.balance\n        }\n      >\n        {d.symbol}\n      </option>\n    );\n  });\n\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  useEffect(async () => {\n    const result = await priceFeed();\n    setUsd(result);\n  }, []);\n\n  return (\n    <>\n      <Button\n        width=\"100%\"\n        height=\"100%\"\n        margin={\"0px\"}\n        padding=\"0px\"\n        className=\"font1\"\n        _focus={{ outline: \"none\" }}\n        _hover={{ transform: \"scale(1.09)\" }}\n        borderRadius={\"0px\"}\n      >\n        <p class=\"choice_label1 font2\">TOKEN</p>\n        <IconButton\n          d={{ base: \"flex\" }}\n          onClick={onOpen}\n          bg=\"linear-gradient(125deg,transparent,rgba(0,0,0,255))\"\n          colorScheme=\"grey\"\n          color={\"white\"}\n          width=\"100%\"\n          height=\"100%\"\n          border={\"0px\"}\n          zIndex={\"500\"}\n          borderRadius={\"0px\"}\n        />\n        <img className={\"choice_img2\"} src={img}></img>\n      </Button>\n\n      <Modal\n        size=\"lg\"\n        onClose={() => {\n          onClose();\n          toClose();\n        }}\n        isOpen={isOpen}\n        isCentered\n      >\n        <ModalOverlay />\n        <ModalContent\n          h=\"470px\"\n          bg={\"rgb(30,33,36)\"}\n          color=\"white\"\n          className={\"font1\"}\n        >\n          <ModalHeader\n            fontSize=\"30px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            <p id={\"payment\"}>Transfer Token</p>\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <FormControl\n              onSubmit={sendMessage}\n              id=\"first-name\"\n              isRequired\n              mt={3}\n              width={\"100%\"}\n              margin={\"auto\"}\n            >\n              {/* <FormLabel>Select Chain</FormLabel>\n              <div\n                style={{\n                  display: \"flex\",\n                  backgroundColor: \"rgb(54, 57, 62)\",\n                  paddingTop: \"15px\",\n                  borderRadius: \"10px\",\n                }}\n                \n              >\n                <Select\n                  placeholder=\"chain\"\n                  width={\"35%\"}\n                  margin={\"auto\"}\n                  name=\"chain1\"\n                  outline={\"0px\"}\n                  border={\"0px\"}\n                  marginBottom={\"15px\"}\n                  height={\"100%\"}\n                  fontSize={\"20px\"}\n                  _focus={{ border: \"0px\" }}\n                  onChange={(event) => {\n                    setChain(event.target.value);\n                  }}\n                >\n                  <option value={\"MATIC\"}>MATIC</option>\n                  <option value={\"ETH\"}>ETH</option>\n                </Select>\n                <BsArrowRight className=\"arrow\"></BsArrowRight>\n                <Select\n                  placeholder=\"chain\"\n                  width={\"35%\"}\n                  margin={\"auto\"}\n                  name=\"chain2\"\n                  outline={\"0px\"}\n                  fontSize={\"20px\"}\n                  border={\"0px\"}\n                  marginBottom={\"15px\"}\n                  height={\"100%\"}\n                  _focus={{ border: \"0px\" }}\n                  onChange={(event) => {\n                    setChain(event.target.value);\n                  }}\n                >\n                  <option value={\"MATIC\"}>MATIC</option>\n                  <option value={\"ETH\"}>ETH</option>\n                </Select>\n              </div> */}\n              <div\n                style={{\n                  display: \"flex\",\n                  justifyContent: \"space-between\",\n                  marginTop: \"10px\",\n                }}\n              >\n                <FormLabel>Select Token</FormLabel>\n                <p>Bal:{bal == \"\" ? \"--\" : bal + \" \" + currency}</p>\n              </div>\n              <div className={\"form-pay2\"}>\n                <Select\n                  placeholder=\"token\"\n                  width={\"35%\"}\n                  margin={\"auto\"}\n                  name=\"currency\"\n                  outline={\"0px\"}\n                  border={\"0px\"}\n                  marginBottom={\"15px\"}\n                  marginTop={\"7px\"}\n                  height={\"100%\"}\n                  fontSize={\"20px\"}\n                  _focus={{ border: \"0px\" }}\n                  className={\"font1\"}\n                  onChange={(event) => {\n                    if (event.target.value.split(\"|\")[0] != \"\") {\n                      setTokenAddress(event.target.value.split(\"|\")[1]);\n                      setCurrency(event.target.value.split(\"|\")[0]);\n                      setBal(event.target.value.split(\"|\")[2].substring(0, 8));\n                    } else {\n                      setBal(\"\");\n                    }\n                  }}\n                >\n                  {options2}\n                </Select>\n                <div>\n                  <Input\n                    placeholder=\"Enter amount\"\n                    type=\"number\"\n                    variant=\"filled\"\n                    bg=\"rgba(54,57,62,0)\"\n                    color=\"white\"\n                    focusBorderColor=\"rgb(54,57,62)\"\n                    value={newMessage}\n                    textAlign={\"right\"}\n                    width=\"100%\"\n                    marginBottom={\"15px\"}\n                    height={\"35px\"}\n                    fontSize=\"19px\"\n                    onChange={typingHandler}\n                    _focus={{ border: \"0px\" }}\n                    _hover={{ bg: \"transparent\" }}\n                  />\n                  <p\n                    style={{\n                      textAlign: \"right\",\n                      fontStyle: \"italic\",\n                      fontSize: \"14px\",\n                    }}\n                  >\n                    {currency==\"LINK\" && (<p>~&ensp;{parseInt(newMessage) * usd}&ensp;$</p> )}\n                    {currency!=\"LINK\" && (<p>~&ensp;NaN&ensp;$</p> )}\n                  </p>\n                </div>\n              </div>\n\n              <div\n                className={\"form-pay\"}\n                style={{ width: \"fit-content\", margin: \"auto\" }}\n              >\n                <Input\n                  placeholder=\"Add a Note\"\n                  type=\"text\"\n                  variant=\"filled\"\n                  bg=\"rgb(54,57,62)\"\n                  color=\"white\"\n                  focusBorderColor=\"rgb(54,57,62)\"\n                  value={note}\n                  width=\"55%\"\n                  marginLeft={\"55px\"}\n                  borderRadius={\"50px\"}\n                  height={\"45px\"}\n                  fontSize=\"12px\"\n                  textAlign={\"center\"}\n                  onChange={(event) => {\n                    setNote(event.target.value);\n                  }}\n                  _hover={{ bg: \"rgb(54,57,62)\" }}\n                />\n              </div>\n            </FormControl>\n          </ModalBody>\n          <ModalFooter>\n            <Button\n              onClick={() => {\n                onClose();\n                sendMessageReq();\n                toClose();\n              }}\n              backgroundColor=\"rgb(40,43,48)\"\n              marginRight={\"10px\"}\n              _hover={{ bg: \"rgb(255, 223, 64)\", color: \"black\" }}\n              borderRadius={\"30px\"}\n            >\n              Request\n            </Button>\n            <Button\n              onClick={() => {\n                onClose();\n                sendMessage();\n                toClose();\n              }}\n              backgroundColor=\"rgb(40,43,48)\"\n              _hover={{ bg: \"rgb(3, 252, 173)\", color: \"black\" }}\n              borderRadius={\"30px\"}\n            >\n              Pay\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default Pay;\n","const { ethers} = require(\"ethers\");\nconst { POSClient, use } = require(\"@maticnetwork/maticjs\");\nconst { Web3ClientPlugin } = require(\"@maticnetwork/maticjs-ethers\");\n\n\n\nasync function sendnft(to,token_address,token_id,sender_address) {\n  const contractabi = require(\"../abi/senderc20.json\");\n  const erc721abi=require(\"../abi/IERC721.json\");\n  const contractaddr = \"0xfEa987B55BA353482487E018327B056b91Aa8538\";\n\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  await provider.send(\"eth_requestAccounts\", []);\n  const signer = provider.getSigner();\n\n  const contract_signer = new ethers.Contract(\n    contractaddr,\n    contractabi,\n    signer\n  );\n\n  const erc721_signer = new ethers.Contract(\n    token_address,\n    erc721abi,\n    signer\n  );\n\nconst approveNft= await erc721_signer.approve(contractaddr,token_id)\n\n  // const owner1 = sender_address;\n\n  // console.log(\"1\");\n  // use(Web3ClientPlugin);\n\n  // const posClient = new POSClient();\n  // await posClient.init({\n  //   network: \"testnet\",\n  //   version: \"mumbai\",\n  //   parent: {\n  //     provider: signer,\n  //     defaultConfig: {\n  //       from: owner1,\n  //     },\n  //   },\n  //   child: {\n  //     provider: signer,\n  //     defaultConfig: {\n  //       from: owner1,\n  //     },\n  //   },\n  // });\n  console.log(\"2\");\n\n//    const erc721RootToken = posClient.erc721(token_address,true);\n// const approveResult = await erc721RootToken.approve(token_id);\n  console.log(\"3\");\n\n  \n  const sendNft = await contract_signer.SendNFT(to,token_address,token_id,{gasLimit: 210000});\n}\n\nexport default sendnft;","import { React } from \"react\";\nimport \"./Pay.css\";\nimport { FaDollarSign } from \"react-icons/fa\";\nimport {\n  Input,\n  InputGroup,\n  InputLeftElement,\n  InputRightElement,\n} from \"@chakra-ui/input\";\n\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  Text,\n  Image,\n  Select,\n} from \"@chakra-ui/react\";\nimport { FormControl } from \"@chakra-ui/form-control\";\nimport { Box } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport \"./SingleChat.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\n\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport sendnft from \"../contracts/frontend-interaction/SendNft\";\n\nconst ENDPOINT = \"https://sake-backend.onrender.com\"; // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\nvar socket, selectedChatCompare;\n\nconst PayNft = ({\n  fetchAgain,\n  setFetchAgain,\n  fetchMessages,\n  refAgain,\n  toClose,\n  Moralis,\n  sender_id,\n}) => {\n  const [messages, setMessages] = useState([]);\n  const [currency, setCurrency] = useState(\"\");\n  const [payment_type, setPaymentType] = useState(\"token\");\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n  const [options, setOptions] = useState([]);\n  const [imageUrl, setImageUrl] = useState(\"\");\n  const [token_id,setTokenId]=useState(\"\");\n  const [token_address,setTokenAddress]=useState(\"\");\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\n    ChatState();\n\n  const sendMessage = async (event) => {\n\n    await sendnft(sender_id,token_address,token_id,localStorage.getItem(\"address\"));\n\n    if (newMessage || imageUrl) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        console.log(newMessage + \" \" + selectedChat);\n        const { data } = await axios.post(\n          \"https://sake-backend.onrender.com/api/message\",\n          {\n            content: currency,\n            chatId: selectedChat,\n            payment: true,\n            payment_mode: \"pay\",\n            chat_mode: \"private\",\n            payment_type: \"NFT\",\n            currency: \"empty\",\n            receiver_id: sender_id,\n            note: imageUrl,\n            token_address:\"empty\",\n          },\n          config\n        );\n        console.log(data);\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n      refAgain();\n    }\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n    console.log(socket);\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    socket.on(\"message recieved\", (newMessageRecieved) => {\n      if (\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\n        selectedChatCompare._id !== newMessageRecieved.chat._id\n      ) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  useEffect(async () => {\n    const { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\n    const address = localStorage.getItem(\"address\");\n\n    const chain = EvmChain.MUMBAI;\n\n    if (Moralis != undefined) {\n      const response = await Moralis.EvmApi.nft.getWalletNFTs({\n        address,\n        chain,\n      });\n\n      console.log(response.toJSON());\n      setOptions(response.toJSON().result);\n    }\n  }, [Moralis]);\n\n  const options2 = options\n    .filter((d) => {\n      if (JSON.parse(d.metadata) != null) {\n        return true;\n      } else {\n        return false;\n      }\n    })\n    .map((d) => {\n      return (\n        <option value={d.name + \"|\" + JSON.parse(d.metadata).image+\"|\"+d.token_id+\"|\"+d.token_address}>\n          {d.name}&ensp;&ensp;(tokenId:{d.token_id})\n        </option>\n      );\n    });\n\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      <Button\n        width=\"100%\"\n        height=\"100%\"\n        margin={\"0px\"}\n        padding=\"0px\"\n        _hover={{ transform: \"scale(1.09)\" }}\n      >\n        <p class=\"choice_label font2\">NFT</p>\n        <IconButton\n          d={{ base: \"flex\" }}\n          onClick={onOpen}\n          colorScheme=\"grey\"\n          bg=\"linear-gradient(125deg,rgba(0,0,0,255),transparent)\"\n          width=\"100%\"\n          height=\"100%\"\n          zIndex={\"500\"}\n          border={\"0px\"}\n          borderRadius={\"0px\"}\n        />\n        <img\n          className={\"choice_img\"}\n          src=\"https://nftnow.com/wp-content/uploads/2022/02/Doodles-Guide-Feature-Image.png\"\n        ></img>\n      </Button>\n\n      <Modal\n        size=\"lg\"\n        onClose={() => {\n          onClose();\n          toClose();\n        }}\n        isOpen={isOpen}\n        isCentered\n      >\n        <ModalOverlay />\n        <ModalContent\n          h=\"560px\"\n          bg={\"rgb(30,33,36)\"}\n          color=\"white\"\n          className=\"font1\"\n        >\n          <ModalHeader\n            fontSize=\"40px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            margin={\"5px\"}\n            justifyContent=\"center\"\n          >\n            <p id={\"payment\"} style={{ fontSize: \"20px\" }}>\n              Transfer NFT\n            </p>\n          </ModalHeader>\n         \n          <ModalBody>\n            <div className=\"imageNft\">\n              {imageUrl == \"\" && <p>select a NFT</p>}\n              {imageUrl != \"\" && <img src={imageUrl}></img>}\n            </div>\n            <FormControl\n              onSubmit={sendMessage}\n              id=\"first-name\"\n              isRequired\n              mt={3}\n              width={\"100%\"}\n              margin={\"auto\"}\n            >\n              <Select\n                placeholder=\"select the NFT\"\n                size=\"lg\"\n                fontSize={\"15px\"}\n                width={\"80%\"}\n                margin={\"auto\"}\n                name=\"currency\"\n                onChange={(event) => {\n                  console.log(event.target);\n                  console.log(event.target.value.split(\"|\")[0]);\n                  setImageUrl(event.target.value.split(\"|\")[1]);\n                  setTokenId(event.target.value.split(\"|\")[2]);\n                  setTokenAddress(event.target.value.split(\"|\")[3]);\n                  setCurrency(event.target.value);\n                }}\n                _focus={{outline:\"none\"}}\n              >\n                {options2}\n              </Select>\n            </FormControl>\n          </ModalBody>\n          <ModalFooter>\n            <Button\n              onClick={() => {\n                onClose();\n                sendMessage();\n                toClose();\n              }}\n              backgroundColor=\"rgb(40,43,48)\"\n              _hover={{ bg: \"rgb(3, 252, 173)\", color: \"black\" }}\n              borderRadius={\"30px\"}\n              className=\"font1\"\n            >\n              Send\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default PayNft;\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  IconButton,\n  Text,\n  Image,\n} from \"@chakra-ui/react\";\nimport Pay from \"./Pay\";\nimport \"./Pay.css\";\nimport { FaDollarSign } from \"react-icons/fa\";\nimport PayNft from \"./PayNft\";\n\nconst PaymentChoice = ({\n  children,\n  fetchAgain,\n  setFetchAgain,\n  fetchMessages,\n  refAgain,\n  Moralis,\n  EvmChain,\n  sender_id,\n  \n}) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      {children ? (\n        <span onClick={onOpen}>{children}</span>\n      ) : (\n        <IconButton\n          d={{ base: \"flex\" }}\n          icon={<FaDollarSign />}\n          onClick={onOpen}\n          colorScheme=\"grey\"\n          _hover={{ bg: \"rgb(3, 252, 173);\", color: \"black\" }}\n          bg=\"rgb(48, 48, 48)\"\n          borderRadius=\"50%\"\n          marginLeft=\"8px\"\n          color=\"white\"\n        />\n      )}\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent\n          h=\"280px\"\n          bg=\"transparent\"\n          backdropFilter=\"auto\"\n          backdropBlur=\"6px\"\n          color=\"white\"\n          padding={\"10px\"}\n        >\n          <ModalBody\n            d=\"flex\"\n            flexDir=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n            \n          >\n            <div className=\"payment_choice one\">\n              <Pay\n                fetchAgain={fetchAgain}\n                setFetchAgain={setFetchAgain}\n                fetchMessages={fetchMessages}\n                refAgain={refAgain}\n                toClose={onClose}\n                Moralis={Moralis}\n                EvmChain={EvmChain}\n                sender_id={sender_id}\n               \n\n              ></Pay>\n            </div>\n            <div className=\"payment_choice two\">\n              <PayNft\n                fetchAgain={fetchAgain}\n                setFetchAgain={setFetchAgain}\n                fetchMessages={fetchMessages}\n                refAgain={refAgain}\n                toClose={onClose}\n                Moralis={Moralis}\n                EvmChain={EvmChain}\n                sender_id={sender_id}\n                \n              ></PayNft>\n            </div>\n          </ModalBody>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default PaymentChoice;\n","export default __webpack_public_path__ + \"static/media/crowd.5da16086.webp\";","const { ethers} = require(\"ethers\");\nasync function  Crowdfund_launch(amount,days,token_address){\n\n    console.log(days);\n\n   \n    \n    const Crowdfund_launch_abi = require(\"../abi/Crowdfunding.json\")\n    const Crowdfundaddr = \"0x81e49Fde3A9306c60727a707e1Fa5820671D271B\";\n\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n  await provider.send(\"eth_requestAccounts\", []);\n  const signer = provider.getSigner();\n\n  const contract_signer = new ethers.Contract(\n    Crowdfundaddr,\n    Crowdfund_launch_abi,\n    signer\n  );\n  const contract_provider = new ethers.Contract(\n    Crowdfundaddr,\n    Crowdfund_launch_abi,\n    provider\n  );\n\n\n  const input0 = \"\"+amount;\n  const decimals0 = \"18\";\n  const amount1 = ethers.utils.parseUnits(input0, decimals0);\n\n  const submittxn =await contract_signer.launch(amount1,days,token_address,{gasLimit: 210000})\n//   const confirmtxn  = await contract_signer.confirmTransaction()\n//   const executetxn  = await contract_signer.executeTransaction()\n\nconst transferEvents = await contract_provider.on('Launch', (id,creator,goal,startedAt,endAt)=>{\n  let info={\n    id:id,\n    creator:creator,\n    goal:goal,\n    startedAt:startedAt,\n    endAt:endAt\n  };\n\n  temp(info.id);\n});\n\n}\n\nconst temp=(info)=>{\n  localStorage.setItem(\"temp2\",info);\n}\n\nexport default Crowdfund_launch;","import { React } from \"react\";\nimport \"./Pay.css\";\nimport { FaDollarSign } from \"react-icons/fa\";\nimport {\n  Input,\n  InputGroup,\n  InputLeftElement,\n  InputRightElement,\n} from \"@chakra-ui/input\";\nimport img from \"../crowd.webp\";\nimport { RiSendPlane2Fill } from \"react-icons/ri\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  Text,\n  Image,\n  Select,\n  useStyles,\n} from \"@chakra-ui/react\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Box } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport \"./SingleChat.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\nimport priceFeed from \"../contracts/frontend-interaction/priceFeed\";\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nimport senderc20 from \"../contracts/frontend-interaction/senderc20\";\nimport Crowdfund_launch from \"../contracts/frontend-interaction/Crowdfund_launch\";\n\nconst ENDPOINT = \"https://sake-backend.onrender.com\"; // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\nvar socket, selectedChatCompare;\n\nconst CrowdFunding = ({\n  fetchAgain,\n  setFetchAgain,\n  fetchMessages,\n  refAgain,\n  toClose,\n  Moralis,\n  sender_id,\n}) => {\n  const [messages, setMessages] = useState([]);\n  const [currency, setCurrency] = useState(\"\");\n  const [payment_type, setPaymentType] = useState(\"token\");\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n  const [chain, setChain] = useState(\"\");\n  const [token_address, setTokenAddress] = useState(\"\");\n  const [note, setNote] = useState(\"\");\n  const [owner_address, setOwner_address] = useState(\n    localStorage.getItem(\"address\")\n  );\n  const [bal, setBal] = useState(\"\");\n  const [usd, setUsd] = useState(0);\n  const [date, setDate] = useState(\"\");\n  function sleep(time){\n    return new Promise((resolve)=>setTimeout(resolve,time)\n  )\n}\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\n    ChatState();\n\n  const sendMessage1 = async (event) => {\n    const temp=new Date();\n    temp.setDate(temp.getDate()+parseInt(date))\n    console.log(temp.getTime())\n    localStorage.removeItem(\"temp2\")\n    await Crowdfund_launch(newMessage,Math.floor(temp.getTime() / 1000),token_address);\n    sleep(10000).then(async()=>{\n      if (newMessage) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        try {\n          const config = {\n            headers: {\n              \"Content-type\": \"application/json\",\n              Authorization: `Bearer ${user.token}`,\n            },\n          };\n          setNewMessage(\"\");\n          console.log(newMessage + \" \" + selectedChat);\n          const { data } = await axios.post(\n            \"https://sake-backend.onrender.com/api/message\",\n            {\n              content: newMessage +\"|\"+localStorage.getItem(\"temp2\"),\n              chatId: selectedChat,\n              payment: true,\n              payment_mode: temp,\n              chat_mode: \"group\",\n              payment_type: \"crowd\",\n              currency: currency,\n              receiver_id: sender_id,\n              note: note,\n              token_address: token_address,\n            },\n            config\n          );\n          console.log(data);\n          socket.emit(\"new message\", data);\n          setMessages([...messages, data]);\n        } catch (error) {\n          toast({\n            title: \"Error Occured!\",\n            description: \"Failed to send the Message\",\n            status: \"error\",\n            duration: 5000,\n            isClosable: true,\n            position: \"bottom\",\n          });\n        }\n        refAgain();\n      }// This should also print the correct value\n    }, 1000);\n    \n  };\n\n  const typingHandler = (e) => {\n    setNewMessage(e.target.value);\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n    console.log(socket);\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    socket.on(\"message recieved\", (newMessageRecieved) => {\n      if (\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\n        selectedChatCompare._id !== newMessageRecieved.chat._id\n      ) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  const [options, setOptions] = useState([]);\n\n  useEffect(async () => {\n    const { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\n    const address = localStorage.getItem(\"address\");\n\n    const chain = EvmChain.MUMBAI;\n\n    if (Moralis != undefined) {\n      const response = await Moralis.EvmApi.token.getWalletTokenBalances({\n        address,\n        chain,\n      });\n\n      console.log(response.toJSON());\n      setOptions(response.toJSON());\n    }\n  }, [Moralis]);\n\n  const options2 = options.map((d) => {\n    return (\n      <option\n        className=\"font1\"\n        value={\n          d.symbol + \"|\" + d.token_address + \"|\" + Math.pow(10, -18) * d.balance\n        }\n      >\n        {d.symbol}\n      </option>\n    );\n  });\n\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  useEffect(async () => {\n    const result = await priceFeed();\n    setUsd(result);\n  }, []);\n\n  return (\n    <>\n      <Button\n        width=\"100%\"\n        height=\"100%\"\n        margin={\"0px\"}\n        padding=\"0px\"\n        className=\"font1\"\n        _focus={{ outline: \"none\" }}\n        _hover={{ transform: \"scale(1.09)\" }}\n        borderRadius={\"0px\"}\n      >\n        <p\n          class=\"choice_label font2\"\n          style={{ fontSize: \"14px\", marginLeft: \"35px\" }}\n        >\n          Crowd Funding\n        </p>\n        <IconButton\n          d={{ base: \"flex\" }}\n          onClick={onOpen}\n          colorScheme=\"grey\"\n          bg=\"linear-gradient(125deg,rgba(0,0,0,255) 10%,transparent)\"\n          width=\"100%\"\n          height=\"100%\"\n          zIndex={\"500\"}\n          border={\"0px\"}\n          borderRadius={\"0px\"}\n        />\n        <img className={\"choice_img2\"} src={img}></img>\n      </Button>\n\n      <Modal\n        size=\"lg\"\n        onClose={() => {\n          onClose();\n          toClose();\n        }}\n        isOpen={isOpen}\n        isCentered\n      >\n        <ModalOverlay />\n        <ModalContent\n          h=\"460px\"\n          bg={\"rgb(30,33,36)\"}\n          color=\"white\"\n          className={\"font1\"}\n        >\n          <ModalBody>\n            <p id={\"payment\"} style={{\"textAlign\":\"center\"}}>CrowdFunding</p>\n            <FormControl\n              id=\"first-name\"\n              isRequired\n              mt={3}\n              width={\"100%\"}\n              margin={\"auto\"}\n            >\n              <div\n                style={{\n                  display: \"flex\",\n                  justifyContent: \"space-between\",\n                  marginTop: \"10px\",\n                }}\n              >\n                <FormLabel>Select Token</FormLabel>\n                <p>Bal:{bal == \"\" ? \"--\" : bal + \" \" + currency}</p>\n              </div>\n              <div className={\"form-pay2\"}>\n                <Select\n                  placeholder=\"token\"\n                  width={\"35%\"}\n                  margin={\"auto\"}\n                  name=\"currency\"\n                  outline={\"0px\"}\n                  border={\"0px\"}\n                  marginBottom={\"15px\"}\n                  marginTop={\"7px\"}\n                  height={\"100%\"}\n                  fontSize={\"20px\"}\n                  _focus={{ border: \"0px\" }}\n                  className={\"font1\"}\n                  onChange={(event) => {\n                    if (event.target.value.split(\"|\")[0] != \"\") {\n                      setTokenAddress(event.target.value.split(\"|\")[1]);\n                      setCurrency(event.target.value.split(\"|\")[0]);\n                      setBal(event.target.value.split(\"|\")[2].substring(0, 8));\n                    } else {\n                      setBal(\"\");\n                    }\n                  }}\n                >\n                  {options2}\n                </Select>\n                <div>\n                  <Input\n                    placeholder=\"Enter goal\"\n                    type=\"number\"\n                    variant=\"filled\"\n                    bg=\"rgba(54,57,62,0)\"\n                    color=\"white\"\n                    focusBorderColor=\"rgb(54,57,62)\"\n                    value={newMessage}\n                    textAlign={\"right\"}\n                    width=\"100%\"\n                    marginBottom={\"15px\"}\n                    height={\"35px\"}\n                    fontSize=\"19px\"\n                    onChange={typingHandler}\n                    _focus={{ border: \"0px\" }}\n                    _hover={{ bg: \"transparent\" }}\n                  />\n                  <p\n                    style={{\n                      textAlign: \"right\",\n                      fontStyle: \"italic\",\n                      fontSize: \"14px\",\n                    }}\n                  >\n                    ~&ensp;{parseInt(newMessage) * usd}&ensp;$\n                  </p>\n                </div>\n              </div>\n\n              \n\n              <p id=\"payment\">Note</p>\n              <Input\n                placeholder=\"Enter a note\"\n                type=\"text\"\n                variant=\"filled\"\n                bg=\"rgb(54,57,62)\"\n                borderRadius={\"10px\"}\n                color=\"white\"\n                focusBorderColor=\"rgb(54,57,62)\"\n                value={note}\n                width=\"100%\"\n                marginBottom={\"15px\"}\n                height={\"35px\"}\n                fontSize=\"15px\"\n                onChange={(event) => {\n                  setNote(event.target.value);\n                }}\n                _focus={{ border: \"0px\" }}\n                _hover={{ bg: \"transparent\" }}\n              />\n\n              <p id=\"payment\">Duration</p>\n              <Input\n                placeholder=\"Enter the duration \"\n                type=\"number\"\n                variant=\"filled\"\n                bg=\"rgb(54,57,62)\"\n                borderRadius={\"10px\"}\n                color=\"white\"\n                focusBorderColor=\"rgb(54,57,62)\"\n                value={date}\n                width=\"100%\"\n                marginBottom={\"15px\"}\n                height={\"35px\"}\n                fontSize=\"15px\"\n                onChange={(event) => {\n                  setDate(event.target.value);\n                }}\n                _focus={{ border: \"0px\" }}\n                _hover={{ bg: \"transparent\" }}\n              />\n            </FormControl>\n            <Button\n              onClick={() => {\n                onClose();\n                sendMessage1();\n                toClose();\n              }}\n              backgroundColor=\"rgb(40,43,48)\"\n              _hover={{ bg: \"rgb(3, 252, 173)\", color: \"black\" }}\n              borderRadius={\"30px\"}\n              width={\"15%\"}\n              marginLeft={\"85%\"}\n              \n            >\n              <RiSendPlane2Fill />\n            </Button>\n          </ModalBody>\n          <ModalFooter></ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default CrowdFunding;\n","export default __webpack_public_path__ + \"static/media/multisig.f255d7f1.jpg\";","const { ethers } = require(\"ethers\");\nasync function Multisig(to, token_address, amount, note,grp_multisig_address) {\n  const Multisigabi = require(\"../abi/Multisig.json\");\n  const Multisigaddr = \"\"+grp_multisig_address;\n\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  await provider.send(\"eth_requestAccounts\", []);\n  const signer = provider.getSigner();\n\n  const contract_signer = new ethers.Contract(\n    Multisigaddr,\n    Multisigabi,\n    signer\n  );\n  const contract_provider = new ethers.Contract(\n    Multisigaddr,\n    Multisigabi,\n    provider\n  );\n\n  const input0 = \"\" + amount;\n  const decimals0 = \"18\";\n  const amount1 = ethers.utils.parseUnits(input0, decimals0);\n\n  const submittxn = await contract_signer.submitTransaction(\n    to,\n    token_address,\n    amount1,\n    note,\n    \"1\",\n    { gasLimit: 210000 }\n  );\n  const block = await provider.getBlockNumber();\n\n  const transferEvents = await contract_provider.on(\n    \"SubmitTransaction\",\n    (from, txindex, to) => {\n      let info = {\n        from: from,\n        txindex: txindex,\n        to: to,\n      };\n\n      temp(info);\n    }\n  );\n\n  return transferEvents;\n\n  //   const confirmtxn  = await contract_signer.confirmTransaction()\n  //   const executetxn  = await contract_signer.executeTransaction()\n}\n\nconst temp = (info) => {\n  localStorage.setItem(\"temp\", info.txindex);\n};\n\nexport default Multisig;\n","const { ethers} = require(\"ethers\");\nasync function  Multisig_confirm(index,grp_multisig_address){\n    const Multisigabi = require(\"../abi/Multisig.json\");\n    const Multisigaddr = \"\"+grp_multisig_address;\n\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n  await provider.send(\"eth_requestAccounts\", []);\n  const signer = provider.getSigner();\n\n  const contract_signer = new ethers.Contract(\n    Multisigaddr,\n    Multisigabi,\n    signer\n  );\n\n\n\n\n  const confirmtxn  = await contract_signer.confirmTransaction(index,{gasLimit: 210000})\n//   const executetxn  = await contract_signer.executeTransaction()\n\n}\n\nexport default Multisig_confirm;","const { ethers} = require(\"ethers\");\nasync function  Multisig_execute(index,grp_multisig_address){\n    const Multisigabi = require(\"../abi/Multisig.json\");\n    const Multisigaddr = \"\"+grp_multisig_address;\n\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n  await provider.send(\"eth_requestAccounts\", []);\n  const signer = provider.getSigner();\n\n  const contract_signer = new ethers.Contract(\n    Multisigaddr,\n    Multisigabi,\n    signer\n  );\n\n\n\n\n  const executetxn  = await contract_signer.executeTransaction(index,{gasLimit: 210000})\n\n\n}\n\nexport default Multisig_execute;","import { React } from \"react\";\nimport \"./Pay.css\";\nimport { FaDollarSign } from \"react-icons/fa\";\nimport {\n  Input,\n  InputGroup,\n  InputLeftElement,\n  InputRightElement,\n} from \"@chakra-ui/input\";\nimport img from \"../eth1.png\";\nimport { RiSendPlane2Fill } from \"react-icons/ri\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  Text,\n  Image,\n  Select,\n  useStyles,\n} from \"@chakra-ui/react\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Box } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport \"./SingleChat.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\nimport priceFeed from \"../contracts/frontend-interaction/priceFeed\";\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nimport senderc20 from \"../contracts/frontend-interaction/senderc20\";\nimport Multisig from \"../contracts/frontend-interaction/Multisig\";\nimport Multisig_confirm from \"../contracts/frontend-interaction/Mutisig_confirm\";\nimport Multisig_execute from \"../contracts/frontend-interaction/Multisig_execute\";\n\nconst ENDPOINT = \"https://sake-backend.onrender.com\"; // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\nvar socket, selectedChatCompare;\n\nconst Pay2 = ({\n  fetchAgain,\n  setFetchAgain,\n  fetchMessages,\n  refAgain,\n  toClose,\n  Moralis,\n  sender_id,\n  grp_multisig_address,\n}) => {\n  const [messages, setMessages] = useState([]);\n  const [currency, setCurrency] = useState(\"\");\n  const [payment_type, setPaymentType] = useState(\"token\");\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n  const [chain, setChain] = useState(\"\");\n  const [token_address, setTokenAddress] = useState(\"\");\n  const [note, setNote] = useState(\"\");\n  const [owner_address, setOwner_address] = useState(\n    localStorage.getItem(\"address\")\n  );\n  const [bal, setBal] = useState(\"\");\n  const [usd, setUsd] = useState(0);\n  const [to, setTo] = useState(\"\");\n  const [confirm, setConfirm] = useState(\"\");\n  const [execute, setExecute] = useState(\"\");\n  const [index, setIndex] = useState(\"\");\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\n    ChatState();\n\n  const sendMessage1 = async (event) => {\n\n    const result=await Multisig(to,token_address,newMessage,note,grp_multisig_address);\n    console.log(\"lll\");\n    console.log(localStorage.getItem(\"temp\"))\n    setIndex(localStorage.getItem(\"temp\"))\n    if (newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        console.log(newMessage + \" \" + selectedChat);\n        const { data } = await axios.post(\n          \"https://sake-backend.onrender.com/api/message\",\n          {\n            content: to,\n            chatId: selectedChat,\n            payment: true,\n            payment_mode: \"pay\",\n            chat_mode: \"group\",\n            payment_type: \"token\",\n            currency: \"submitted txn\",\n            receiver_id: sender_id,\n            note: note,\n            token_address: localStorage.getItem(\"temp\"),\n          },\n          config\n        );\n        console.log(data);\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n      refAgain();\n    }\n  };\n\n  const sendMessage2 = async (event) => {\n    await Multisig_confirm(confirm,grp_multisig_address);\n    if (newMessage || confirm) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        console.log(confirm);\n        console.log(newMessage + \" \" + selectedChat);\n        const { data } = await axios.post(\n          \"https://sake-backend.onrender.com/api/message\",\n          {\n            content: confirm,\n            chatId: selectedChat,\n            payment: true,\n            payment_mode: \"pay\",\n            chat_mode: \"group\",\n            payment_type: \"token\",\n            currency: \"confirmed txn\",\n            receiver_id: sender_id,\n            note: \"empty\",\n            token_address: confirm,\n          },\n          config\n        );\n        console.log(data);\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n      refAgain();\n    }\n  };\n\n  const sendMessage3 = async (event) => {\n\n   \n    await Multisig_execute(execute,grp_multisig_address);\n   \n    if (newMessage || execute) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        console.log(newMessage + \" \" + selectedChat);\n        const { data } = await axios.post(\n          \"https://sake-backend.onrender.com/api/message\",\n          {\n            content: execute,\n            chatId: selectedChat,\n            payment: true,\n            payment_mode: \"pay\",\n            chat_mode: \"group\",\n            payment_type: \"token\",\n            currency: \"executed txn\",\n            receiver_id: sender_id,\n            note: \"\",\n            token_address: execute,\n          },\n          config\n        );\n        console.log(data);\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n      refAgain();\n    }\n  };\n\n  const typingHandler = (e) => {\n    setNewMessage(e.target.value);\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n    console.log(socket);\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    socket.on(\"message recieved\", (newMessageRecieved) => {\n      if (\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\n        selectedChatCompare._id !== newMessageRecieved.chat._id\n      ) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  const [options, setOptions] = useState([]);\n\n  useEffect(async () => {\n    const { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\n    const address = localStorage.getItem(\"address\");\n\n    const chain = EvmChain.MUMBAI;\n\n    if (Moralis != undefined) {\n      const response = await Moralis.EvmApi.token.getWalletTokenBalances({\n        address,\n        chain,\n      });\n\n      console.log(response.toJSON());\n      setOptions(response.toJSON());\n    }\n  }, [Moralis]);\n\n  const options2 = options.map((d) => {\n    return (\n      <option\n        className=\"font1\"\n        value={\n          d.symbol + \"|\" + d.token_address + \"|\" + Math.pow(10, -18) * d.balance\n        }\n      >\n        {d.symbol}\n      </option>\n    );\n  });\n\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  useEffect(async () => {\n    const result = await priceFeed();\n    setUsd(result);\n  }, []);\n\n  return (\n    <>\n      <Button\n        width=\"100%\"\n        height=\"100%\"\n        margin={\"0px\"}\n        padding=\"0px\"\n        className=\"font1\"\n        _focus={{ outline: \"none\" }}\n        _hover={{ transform: \"scale(1.09)\" }}\n        borderRadius={\"0px\"}\n      >\n        <p class=\"choice_label1 font2\">TOKEN</p>\n        <IconButton\n          d={{ base: \"flex\" }}\n          onClick={onOpen}\n          bg=\"linear-gradient(125deg,transparent,rgba(0,0,0,255))\"\n          colorScheme=\"grey\"\n          color={\"white\"}\n          width=\"100%\"\n          height=\"100%\"\n          border={\"0px\"}\n          zIndex={\"500\"}\n          borderRadius={\"0px\"}\n        />\n        <img className={\"choice_img2\"} src={img}></img>\n      </Button>\n\n      <Modal\n        size=\"lg\"\n        onClose={() => {\n          onClose();\n          toClose();\n        }}\n        isOpen={isOpen}\n        isCentered\n      >\n        <ModalOverlay />\n        <ModalContent\n          h=\"560px\"\n          bg={\"rgb(30,33,36)\"}\n          color=\"white\"\n          className={\"font1\"}\n        >\n          <ModalBody>\n            <FormControl\n              id=\"first-name\"\n              isRequired\n              mt={3}\n              width={\"100%\"}\n              margin={\"auto\"}\n            >\n              <p id=\"payment\">Submit</p>\n              <FormLabel>To</FormLabel>\n              <Input\n                placeholder=\"Enter To Address\"\n                type=\"text\"\n                variant=\"filled\"\n                bg=\"rgb(54,57,62)\"\n                borderRadius={\"10px\"}\n                color=\"white\"\n                focusBorderColor=\"rgb(54,57,62)\"\n                value={to}\n                width=\"100%\"\n                marginBottom={\"15px\"}\n                height={\"35px\"}\n                fontSize=\"15px\"\n                onChange={(event) => {\n                  setTo(event.target.value);\n                }}\n                _focus={{ border: \"0px\" }}\n                _hover={{ bg: \"transparent\" }}\n              />\n\n              <div\n                style={{\n                  display: \"flex\",\n                  justifyContent: \"space-between\",\n                  marginTop: \"10px\",\n                }}\n              >\n                <FormLabel>Select Token</FormLabel>\n                <p>Bal:{bal == \"\" ? \"--\" : bal + \" \" + currency}</p>\n              </div>\n              <div className={\"form-pay2\"}>\n                <Select\n                  placeholder=\"token\"\n                  width={\"35%\"}\n                  margin={\"auto\"}\n                  name=\"currency\"\n                  outline={\"0px\"}\n                  border={\"0px\"}\n                  marginBottom={\"15px\"}\n                  marginTop={\"7px\"}\n                  height={\"100%\"}\n                  fontSize={\"20px\"}\n                  _focus={{ border: \"0px\" }}\n                  className={\"font1\"}\n                  onChange={(event) => {\n                    if (event.target.value.split(\"|\")[0] != \"\") {\n                      setTokenAddress(event.target.value.split(\"|\")[1]);\n                      setCurrency(event.target.value.split(\"|\")[0]);\n                      setBal(event.target.value.split(\"|\")[2].substring(0, 8));\n                    } else {\n                      setBal(\"\");\n                    }\n                  }}\n                >\n                  {options2}\n                </Select>\n                <div>\n                  <Input\n                    placeholder=\"Enter amount\"\n                    type=\"number\"\n                    variant=\"filled\"\n                    bg=\"rgba(54,57,62,0)\"\n                    color=\"white\"\n                    focusBorderColor=\"rgb(54,57,62)\"\n                    value={newMessage}\n                    textAlign={\"right\"}\n                    width=\"100%\"\n                    marginBottom={\"15px\"}\n                    height={\"35px\"}\n                    fontSize=\"19px\"\n                    onChange={typingHandler}\n                    _focus={{ border: \"0px\" }}\n                    _hover={{ bg: \"transparent\" }}\n                  />\n                  <p\n                    style={{\n                      textAlign: \"right\",\n                      fontStyle: \"italic\",\n                      fontSize: \"14px\",\n                    }}\n                  >\n                    ~&ensp;{parseInt(newMessage) * usd}&ensp;$\n                  </p>\n                </div>\n              </div>\n\n              <div\n                className={\"form-pay\"}\n                style={{\n                  width: \"100%\",\n                  margin: \"auto\",\n                  display: \"flex\",\n                  justifyContent: \"space-between\",\n                }}\n              >\n                <Input\n                  placeholder=\"Add a Note\"\n                  type=\"text\"\n                  variant=\"filled\"\n                  bg=\"rgb(54,57,62)\"\n                  color=\"white\"\n                  focusBorderColor=\"rgb(54,57,62)\"\n                  value={note}\n                  width=\"55%\"\n                  borderRadius={\"10px\"}\n                  height={\"35px\"}\n                  fontSize=\"12px\"\n                  textAlign={\"center\"}\n                  onChange={(event) => {\n                    setNote(event.target.value);\n                  }}\n                  _hover={{ bg: \"rgb(54,57,62)\" }}\n                />\n                <Button\n                  onClick={() => {\n                    onClose();\n                    sendMessage1();\n                    toClose();\n                  }}\n                  backgroundColor=\"rgb(40,43,48)\"\n                  _hover={{ bg: \"rgb(3, 252, 173)\", color: \"black\" }}\n                  borderRadius={\"30px\"}\n                  width={\"15%\"}\n                >\n                  <RiSendPlane2Fill />\n                </Button>\n              </div>\n              <p id=\"payment\">Confirm</p>\n              <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n                <Input\n                  placeholder=\"transaction index\"\n                  type=\"text\"\n                  variant=\"filled\"\n                  bg=\"rgb(54,57,62)\"\n                  borderRadius={\"10px\"}\n                  color=\"white\"\n                  focusBorderColor=\"rgb(54,57,62)\"\n                  value={confirm}\n                  width=\"80%\"\n                  marginBottom={\"15px\"}\n                  height={\"35px\"}\n                  fontSize=\"15px\"\n                  onChange={(event) => {\n                    setConfirm(event.target.value);\n                  }}\n                  _focus={{ border: \"0px\" }}\n                  _hover={{ bg: \"transparent\" }}\n                />\n                <Button\n                  onClick={() => {\n                    onClose();\n                    sendMessage2();\n                    toClose();\n                  }}\n                  backgroundColor=\"rgb(40,43,48)\"\n                  _hover={{ bg: \"rgb(3, 252, 173)\", color: \"black\" }}\n                  borderRadius={\"30px\"}\n                  width={\"15%\"}\n                >\n                  <RiSendPlane2Fill />\n                </Button>\n              </div>\n\n              <p id=\"payment\">Execute</p>\n              <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n                <Input\n                  placeholder=\"Transaction index\"\n                  type=\"text\"\n                  variant=\"filled\"\n                  bg=\"rgb(54,57,62)\"\n                  borderRadius={\"10px\"}\n                  color=\"white\"\n                  focusBorderColor=\"rgb(54,57,62)\"\n                  value={execute}\n                  width=\"80%\"\n                  marginBottom={\"15px\"}\n                  height={\"35px\"}\n                  fontSize=\"15px\"\n                  onChange={(event) => {\n                    setExecute(event.target.value);\n                  }}\n                  _focus={{ border: \"0px\" }}\n                  _hover={{ bg: \"transparent\" }}\n                />\n                <Button\n                  onClick={() => {\n                    onClose();\n                    sendMessage3();\n                    toClose();\n                  }}\n                  backgroundColor=\"rgb(40,43,48)\"\n                  _hover={{ bg: \"rgb(3, 252, 173)\", color: \"black\" }}\n                  borderRadius={\"30px\"}\n                  width={\"15%\"}\n                >\n                  <RiSendPlane2Fill />\n                </Button>\n              </div>\n            </FormControl>\n          </ModalBody>\n          <ModalFooter></ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default Pay2;\n","import { React } from \"react\";\nimport \"./Pay.css\";\nimport { FaDollarSign } from \"react-icons/fa\";\nimport {\n  Input,\n  InputGroup,\n  InputLeftElement,\n  InputRightElement,\n} from \"@chakra-ui/input\";\n\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  Text,\n  Image,\n  Select,\n} from \"@chakra-ui/react\";\nimport { FormControl } from \"@chakra-ui/form-control\";\nimport { Box } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport \"./SingleChat.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\n\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst ENDPOINT = \"https://sake-backend.onrender.com\";  // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\nvar socket, selectedChatCompare;\n\nconst PayNft2 = ({\n  fetchAgain,\n  setFetchAgain,\n  fetchMessages,\n  refAgain,\n  toClose,\n  Moralis,\n  sender_id,\n}) => {\n  const [messages, setMessages] = useState([]);\n  const [currency, setCurrency] = useState(\"\");\n  const [payment_type, setPaymentType] = useState(\"token\");\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n  const [options, setOptions] = useState([]);\n  const [imageUrl, setImageUrl] = useState(\"\");\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\n    ChatState();\n\n  const sendMessage = async (event) => {\n    if (newMessage || imageUrl) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        console.log(newMessage + \" \" + selectedChat);\n        const { data } = await axios.post(\n          \"https://sake-backend.onrender.com/api/message\",\n          {\n            content: currency,\n            chatId: selectedChat,\n            payment: true,\n            payment_mode: \"pay\",\n            chat_mode: \"private\",\n            payment_type: \"NFT\",\n            currency: \"empty\",\n            receiver_id: sender_id,\n            note: imageUrl,\n            token_address:\"empty\",\n          },\n          config\n        );\n        console.log(data);\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n      refAgain();\n    }\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n    console.log(socket);\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    socket.on(\"message recieved\", (newMessageRecieved) => {\n      if (\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\n        selectedChatCompare._id !== newMessageRecieved.chat._id\n      ) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  useEffect(async () => {\n    const { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\n    const address = \"0xf5b7a2f2a99aEa196994f525f531D648417d2706\";\n\n    const chain = EvmChain.MUMBAI;\n\n    if (Moralis != undefined) {\n      const response = await Moralis.EvmApi.nft.getWalletNFTs({\n        address,\n        chain,\n      });\n\n      console.log(response.toJSON());\n      setOptions(response.toJSON().result);\n    }\n  }, [Moralis]);\n\n  const options2 = options\n    .filter((d) => {\n      if (JSON.parse(d.metadata) != null) {\n        return true;\n      } else {\n        return false;\n      }\n    })\n    .map((d) => {\n      return (\n        <option value={d.name + \"|\" + JSON.parse(d.metadata).image}>\n          {d.name}&ensp;&ensp;(tokenId:{d.token_id})\n        </option>\n      );\n    });\n\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      <Button\n        width=\"100%\"\n        height=\"100%\"\n        margin={\"0px\"}\n        padding=\"0px\"\n        _hover={{ transform: \"scale(1.09)\" }}\n      >\n        <p class=\"choice_label font2\">NFT</p>\n        <IconButton\n          d={{ base: \"flex\" }}\n          onClick={onOpen}\n          colorScheme=\"grey\"\n          bg=\"linear-gradient(125deg,rgba(0,0,0,255),transparent)\"\n          width=\"100%\"\n          height=\"100%\"\n          zIndex={\"500\"}\n          border={\"0px\"}\n          borderRadius={\"0px\"}\n        />\n        <img\n          className={\"choice_img\"}\n          src=\"https://nftnow.com/wp-content/uploads/2022/02/Doodles-Guide-Feature-Image.png\"\n        ></img>\n      </Button>\n\n      <Modal\n        size=\"lg\"\n        onClose={() => {\n          onClose();\n          toClose();\n        }}\n        isOpen={isOpen}\n        isCentered\n      >\n        <ModalOverlay />\n        <ModalContent\n          h=\"560px\"\n          bg={\"rgb(30,33,36)\"}\n          color=\"white\"\n          className=\"font1\"\n        >\n          <ModalHeader\n            fontSize=\"40px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            margin={\"5px\"}\n            justifyContent=\"center\"\n          >\n            <p id={\"payment\"} style={{ fontSize: \"20px\" }}>\n              Transfer NFT\n            </p>\n          </ModalHeader>\n         \n          <ModalBody>\n            <div className=\"imageNft\">\n              {imageUrl == \"\" && <p>select a NFT</p>}\n              {imageUrl != \"\" && <img src={imageUrl}></img>}\n            </div>\n            <FormControl\n              onSubmit={sendMessage}\n              id=\"first-name\"\n              isRequired\n              mt={3}\n              width={\"100%\"}\n              margin={\"auto\"}\n            >\n              <Select\n                placeholder=\"select the NFT\"\n                size=\"lg\"\n                fontSize={\"15px\"}\n                width={\"80%\"}\n                margin={\"auto\"}\n                name=\"currency\"\n                onChange={(event) => {\n                  console.log(event.target);\n                  console.log(event.target.value.split(\"|\")[0]);\n                  setImageUrl(event.target.value.split(\"|\")[1]);\n                  setCurrency(event.target.value);\n                }}\n                _focus={{outline:\"none\"}}\n              >\n                {options2}\n              </Select>\n            </FormControl>\n          </ModalBody>\n          <ModalFooter>\n            <Button\n              onClick={() => {\n                onClose();\n                sendMessage();\n                toClose();\n              }}\n              backgroundColor=\"rgb(40,43,48)\"\n              _hover={{ bg: \"rgb(3, 252, 173)\", color: \"black\" }}\n              borderRadius={\"30px\"}\n              className=\"font1\"\n            >\n              Send\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default PayNft2;\n","import { FormControl } from \"@chakra-ui/form-control\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport { useDisclosure } from \"@chakra-ui/hooks\";\nimport \"./SingleChat.css\";\nimport { IconButton, Spinner, useToast, Button } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerContent,\n  DrawerHeader,\n  DrawerOverlay,\n} from \"@chakra-ui/modal\";\nimport ChatLoading from \"./ChatLoading\";\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport Pay from \"./Pay\";\nimport PaymentChoice from \"./PaymentChoice\";\nimport GroupPayment from \"./GroupPayment\";\nimport GroupBox1 from \"./miscellaneous/GroupBox1\";\nimport fetchIndex from \"../contracts/frontend-interaction/multisig_dashboard\";\n\nconst ENDPOINT = \"https://sake-backend.onrender.com\";  // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\nvar socket, selectedChatCompare;\n\nconst SingleChat = ({ fetchAgain, setFetchAgain, Moralis, EvmChain }) => {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n  const [search, setSearch] = useState(\"\");\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [ searchResult, setSearchResult] = useState([]);\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\n    ChatState();\n\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      setLoading(true);\n\n      const { data } = await axios.get(\n        `https://sake-backend.onrender.com/api/message/${selectedChat._id}`,\n        config\n      );\n      \n      setMessages(data);\n      setLoading(false);\n\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n        receiver_id: getSender(user, selectedChat.users),\n      });\n    }\n  };\n\n  const sendMessage = async (event) => {\n    if (event.key === \"Enter\" && newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        console.log(newMessage + \" \" + selectedChat);\n        const { data } = await axios.post(\n          \"https://sake-backend.onrender.com/api/message\",\n          {\n            content: newMessage,\n            chatId: selectedChat,\n            payment: false,\n            payment_mode: \"false\",\n            chat_mode: \"private\",\n            payment_type: \"false\",\n            currency: \"false\",\n            note: \"empty\",\n            token_address: \"empty\",\n          },\n          config\n        );\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n    console.log(socket);\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    fetchMessages();\n\n    selectedChatCompare = selectedChat;\n    // eslint-disable-next-line\n  }, [selectedChat]);\n\n  const refAgain = () => {\n    fetchMessages();\n  };\n\n  useEffect(() => {\n    socket.on(\"message recieved\", (newMessageRecieved) => {\n      if (\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\n        selectedChatCompare._id !== newMessageRecieved.chat._id\n      ) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  const typingHandler = (e) => {\n    setNewMessage(e.target.value);\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  return (\n    <>\n      <div id=\"single_class_div\">\n        {selectedChat ? (\n          <>\n            <Text\n              fontSize={{ base: \"20px\", md: \"20px\" }}\n              pb={3}\n              px={2}\n              w=\"100%\"\n              fontFamily=\"Work sans\"\n              d=\"flex\"\n              justifyContent={{ base: \"space-between\" }}\n              alignItems=\"center\"\n              color=\"white\"\n              position={\"absolute\"}\n              top={\"0\"}\n              left={\"0\"}\n              padding={\"10px\"}\n              bg=\"blackAlpha.400\"\n              backdropFilter=\"auto\"\n              backdropBlur=\"6px\"\n              zIndex={\"1000\"}\n            >\n              <IconButton\n                d={{ base: \"flex\", md: \"none\" }}\n                icon={<ArrowBackIcon />}\n                onClick={() => setSelectedChat(\"\")}\n              />\n              {messages &&\n                (!selectedChat.isGroupChat ? (\n                  <>\n                    <p className=\"font1\">\n                      {getSender(user, selectedChat.users)}\n                    </p>\n                    {/* <ProfileModal\n                    user={getSenderFull(user, selectedChat.users)}\n                  /> */}\n                  </>\n                ) : (\n                  <Box\n                    justifyContent={\"space-between\"}\n                    width={\"100%\"}\n                    display={\"flex\"}\n                  >\n                    <p>{selectedChat.chatName}</p>\n                    <div style={{ display: \"flex\" }}>\n                      <Button\n                        variant=\"ghost\"\n                        onClick={onOpen}\n                        className={\"summa\"}\n                        _hover={{ bg: \"rgb(3, 252, 173);\", color: \"black\" }}\n                      >\n                        <Text>#search</Text>\n                      </Button>\n                      <UpdateGroupChatModal\n                        fetchMessages={fetchMessages}\n                        fetchAgain={fetchAgain}\n                        setFetchAgain={setFetchAgain}\n                      />\n                    </div>\n                  </Box>\n                ))}\n            </Text>\n            <Box\n              d=\"flex\"\n              flexDir=\"column\"\n              justifyContent=\"flex-end\"\n              p={3}\n              bg=\"rgb(66,69,73)\"\n              w=\"100%\"\n              h=\"105%\"\n              borderRadius=\"lg\"\n              overflowY=\"hidden\"\n              paddingTop={\"10px\"}\n            >\n              {loading ? (\n                <Spinner\n                  size=\"xl\"\n                  w={20}\n                  h={20}\n                  alignSelf=\"center\"\n                  margin=\"auto\"\n                />\n              ) : (\n                <div className=\"messages\">\n                  <ScrollableChat messages={messages} refAgain={refAgain} />\n                </div>\n              )}\n\n              <FormControl\n                onKeyDown={sendMessage}\n                id=\"first-name\"\n                isRequired\n                mt={3}\n              >\n                {istyping ? (\n                  <div>\n                    <Lottie\n                      options={defaultOptions}\n                      // height={50}\n                      width={70}\n                      style={{ marginBottom: 15, marginLeft: 0 }}\n                    />\n                  </div>\n                ) : (\n                  <></>\n                )}\n                <div style={{ margin: \"auto\", display: \"flex\" }}>\n                  <Input\n                    variant=\"filled\"\n                    bg=\"rgb(54,57,62)\"\n                    color=\"white\"\n                    focusBorderColor=\"rgb(54,57,62)\"\n                    placeholder=\"Enter a message..\"\n                    value={newMessage}\n                    width=\"97%\"\n                    onChange={typingHandler}\n                    _hover={{ bg: \"rgb(54,57,62)\" }}\n                  />\n                  {messages &&\n                    (!selectedChat.isGroupChat ? (\n                      <PaymentChoice\n                        fetchAgain={fetchAgain}\n                        setFetchAgain={setFetchAgain}\n                        fetchMessages={fetchMessages}\n                        refAgain={refAgain}\n                        Moralis={Moralis}\n                        EvmChain={EvmChain}\n                        sender_id={getSender(user, selectedChat.users)}\n                       \n                      />\n                    ) : (\n                      <GroupPayment\n                        fetchAgain={fetchAgain}\n                        setFetchAgain={setFetchAgain}\n                        fetchMessages={fetchMessages}\n                        refAgain={refAgain}\n                        Moralis={Moralis}\n                        EvmChain={EvmChain}\n                        sender_id={getSender(user, selectedChat.users)}\n                        grp_multisig_address={selectedChat.grp_multisig_address}\n                      />\n                    ))}\n                </div>\n              </FormControl>\n            </Box>\n            <Drawer placement=\"right\" onClose={onClose} isOpen={isOpen}>\n              <DrawerOverlay />\n              <DrawerContent\n                bg=\"blackAlpha.400\"\n                backdropFilter=\"auto\"\n                backdropBlur=\"6px\"\n                color=\"white\"\n                className={\"font1\"}\n                border={\"0px\"}\n              >\n                <DrawerHeader>Search Index</DrawerHeader>\n                <DrawerBody>\n                  <Box d=\"flex\" pb={2}>\n                    <Input\n                      placeholder=\"Search by index\"\n                      value={search}\n                      type=\"number\"\n                      onChange={(event) => {\n                        setSearch(event.target.value);\n                      }}\n                      mr={2}\n                      _focus={{ borderColor: \"#e2b2ff;\" }}\n                    />\n                    <Button\n                      bg=\"white\"\n                      color=\"black\"\n                      _hover={{ bg: \"#77fcc7\" }}\n                      onClick={async() => {\n                        const temp=(await fetchIndex(search));\n                        console.log(temp)\n                        setSearchResult([...searchResult,temp]);\n                       \n                      }}\n                    >\n                      Go\n                    </Button>\n                  </Box>\n                  {loading ? (\n                    <ChatLoading />\n                  ) : (\n                    searchResult?.map((m) => <GroupBox1 \n                    executed={m.executed}\n                    note={m.note}\n                    numConfirmations={m.numConfirmations}\n                    to={m.to}\n                    token={m.token}\n                    amount={m.amountOrtokenid}\n                    typeoftxn={m.typeoftxn}                    \n                    />)\n                  )}\n                </DrawerBody>\n              </DrawerContent>\n            </Drawer>\n          </>\n        ) : (\n          // to get socket.io on same page\n          <Box\n            d=\"flex\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n            h=\"105%\"\n            w=\"100%\"\n            bg=\"rgb(66,69,73)\"\n          >\n            <Text fontSize=\"3xl\" pb={3} color=\"white\" className=\"font1\">\n              Click on a user to start chatting\n            </Text>\n          </Box>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default SingleChat;\n","import { React } from \"react\";\nimport \"./Pay.css\";\nimport { FaDollarSign } from \"react-icons/fa\";\nimport {\n  Input,\n  InputGroup,\n  InputLeftElement,\n  InputRightElement,\n} from \"@chakra-ui/input\";\nimport img from \"../multisig.jpg\";\nimport { BsArrowRight } from \"react-icons/bs\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  Text,\n  Image,\n  Select,\n  useStyles,\n} from \"@chakra-ui/react\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Box } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport \"./SingleChat.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\nimport priceFeed from \"../contracts/frontend-interaction/priceFeed\";\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nimport senderc20 from \"../contracts/frontend-interaction/senderc20\";\nimport Pay2 from \"./Pay2\";\nimport PayNft2 from \"./PayNft2\";\nconst ENDPOINT = \"https://sake-backend.onrender.com\";  // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\nvar socket, selectedChatCompare;\n\n\nconst MultiSig = ({\n    children,\n    fetchAgain,\n    setFetchAgain,\n    fetchMessages,\n    refAgain,\n    Moralis,\n    EvmChain,\n    sender_id,\n    grp_multisig_address,\n}) => {\n    const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      <Button\n        width=\"100%\"\n        height=\"100%\"\n        margin={\"0px\"}\n        padding=\"0px\"\n        className=\"font1\"\n        _focus={{ outline: \"none\" }}\n        _hover={{ transform: \"scale(1.09)\" }}\n        borderRadius={\"0px\"}\n      >\n        <p\n          class=\"choice_label1 font2\"\n          style={{ fontSize: \"18px\", marginRight: \"5px\" }}\n        >\n          MULTI SIG\n        </p>\n        <IconButton\n          d={{ base: \"flex\" }}\n          onClick={onOpen}\n          bg=\"linear-gradient(125deg,transparent,rgba(0,0,0,255)90%)\"\n          colorScheme=\"grey\"\n          color={\"white\"}\n          width=\"100%\"\n          height=\"100%\"\n          border={\"0px\"}\n          zIndex={\"500\"}\n          borderRadius={\"0px\"}\n        />\n        <img className={\"choice_img2\"} src={img}></img>\n      </Button>\n\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent\n          h=\"280px\"\n          bg=\"transparent\"\n          backdropFilter=\"auto\"\n          backdropBlur=\"6px\"\n          color=\"white\"\n          padding={\"10px\"}\n        >\n          <ModalBody\n            d=\"flex\"\n            flexDir=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n          >\n            <div className=\"payment_choice one\">\n              <Pay2\n                fetchAgain={fetchAgain}\n                setFetchAgain={setFetchAgain}\n                fetchMessages={fetchMessages}\n                refAgain={refAgain}\n                toClose={onClose}\n                Moralis={Moralis}\n                EvmChain={EvmChain}\n                sender_id={sender_id}\n                grp_multisig_address={grp_multisig_address}\n              />\n            </div>\n            <div className=\"payment_choice two\">\n              <PayNft2\n                fetchAgain={fetchAgain}\n                setFetchAgain={setFetchAgain}\n                fetchMessages={fetchMessages}\n                refAgain={refAgain}\n                toClose={onClose}\n                Moralis={Moralis}\n                EvmChain={EvmChain}\n                sender_id={sender_id}\n                grp_multisig_address={grp_multisig_address}\n              />\n            </div>\n          </ModalBody>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default MultiSig;\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  IconButton,\n  Text,\n  Image,\n} from \"@chakra-ui/react\";\nimport Pay from \"./Pay\";\nimport \"./Pay.css\";\nimport { FaDollarSign } from \"react-icons/fa\";\nimport PayNft from \"./PayNft\";\nimport CrowdFunding from \"./CrowdFunding\";\nimport MultiSig from \"./MultiSig\";\n\nconst GroupPayment = ({\n  children,\n  fetchAgain,\n  setFetchAgain,\n  fetchMessages,\n  refAgain,\n  Moralis,\n  EvmChain,\n  sender_id,\n  grp_multisig_address,\n}) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      {children ? (\n        <span onClick={onOpen}>{children}</span>\n      ) : (\n        <IconButton\n          d={{ base: \"flex\" }}\n          icon={<FaDollarSign />}\n          onClick={onOpen}\n          colorScheme=\"grey\"\n          _hover={{ bg: \"rgb(3, 252, 173);\", color: \"black\" }}\n          bg=\"rgb(48, 48, 48)\"\n          borderRadius=\"50%\"\n          marginLeft=\"8px\"\n          color=\"white\"\n        />\n      )}\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent\n          h=\"280px\"\n          bg=\"transparent\"\n          backdropFilter=\"auto\"\n          backdropBlur=\"6px\"\n          color=\"white\"\n          padding={\"10px\"}\n        >\n          <ModalBody\n            d=\"flex\"\n            flexDir=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n            \n          >\n            <div className=\"payment_choice one\">\n              <MultiSig\n                fetchAgain={fetchAgain}\n                setFetchAgain={setFetchAgain}\n                fetchMessages={fetchMessages}\n                refAgain={refAgain}\n                toClose={onClose}\n                Moralis={Moralis}\n                EvmChain={EvmChain}\n                sender_id={sender_id}\n                grp_multisig_address={grp_multisig_address}\n\n              />\n            </div>\n            <div className=\"payment_choice two\">\n              <CrowdFunding\n                fetchAgain={fetchAgain}\n                setFetchAgain={setFetchAgain}\n                fetchMessages={fetchMessages}\n                refAgain={refAgain}\n                toClose={onClose}\n                Moralis={Moralis}\n                EvmChain={EvmChain}\n                sender_id={sender_id}\n                \n              />\n            </div>\n          </ModalBody>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default GroupPayment;\n","import { React } from \"react\";\n\nconst GroupBox1 = (props) => {\n  return (\n    <div\n      style={{\n        borderRadius: \"20px\",\n        padding: \"5px 15px\",\n        maxWidth: \"75%\",\n        minWidth: \"260px\",\n        color: \"white\",\n        background: \"rgb(40,43,48)\",\n        marginTop: \"10px\",\n        fontSize: \"10px\",\n      }}\n    >\n      <p class=\"payment_user\">to:{props.to}</p>\n      <p class=\"payment_user\">token:{props.token}</p>\n      <p class=\"payment_user\">note:{props.note}</p>\n      {props.typeoftxn == 1 && (\n        <p class=\"payment_user\">amount:{(\"\"+parseInt(props.amount, 16)).substring(0,8)}</p>\n      )}\n      {props.typeoftxn != 1 && (\n        <p class=\"payment_user\">tokenId:{(\"\"+parseInt(props.amount, 16)).substring(0,8)}</p>\n      )}\n\n      <p class=\"payment_user\">confirmations:{props.numConfirmations}</p>\n      <p class=\"payment_user\">executed:{\"\" + props.executed}</p>\n    </div>\n  );\n};\n\nexport default GroupBox1;\n","import { Box } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport SingleChat from \"./SingleChat\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatbox = ({ fetchAgain, setFetchAgain,Moralis,EvmChain }) => {\n  const { selectedChat } = ChatState();\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\n      alignItems=\"center\"\n      flexDir=\"column\"\n      bg=\"rgb(66,69,73)\"\n      w={{ base: \"100%\", md: \"68%\" }}\n      position={\"relative\"}\n      height={\"100%\"}\n      overflow=\"hidden\"\n    >\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} Moralis={Moralis} EvmChain={EvmChain} />\n    </Box>\n  );\n};\n\nexport default Chatbox;\n","import { ethers } from \"ethers\";\nimport { ContractFactory } from \"ethers\";\nconst contractAbi = require(\"../abi/Multisig.json\");\nconst contractByteCode = require(\"../abi/bytecode.json\");\n\nasync function OnCreate({ owners }) {\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  await provider.send(\"eth_requestAccounts\", []);\n  const signer = provider.getSigner();\n\n  const owner = owners;\n  const number = owner.length;\n\n  const factory = new ContractFactory(contractAbi, contractByteCode, signer);\n  const contract = await factory.deploy(owner, number);\n  return contract.address;\n}\n\nexport default OnCreate;\n","import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport OnCreate from \"../../contracts/frontend-interaction/OnCreate\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst GroupChatModal = ({ children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const toast = useToast();\n\n  const { user, chats, setChats } = ChatState();\n\n  const handleGroup = (userToAdd) => {\n    if (selectedUsers.includes(userToAdd)) {\n      toast({\n        title: \"User already added\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    setSelectedUsers([...selectedUsers, userToAdd]);\n  };\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`https://sake-backend.onrender.com/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const handleDelete = (delUser) => {\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\n  };\n\n  const handleSubmit = async () => {\n    if (!groupChatName || !selectedUsers) {\n      toast({\n        title: \"Please fill all the feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      \n\n      const create_grp_user_list=selectedUsers.map((element)=>{\n        return element.name;\n      })\n\n      create_grp_user_list.push(localStorage.getItem(\"address\"));\n\n      //console.log(create_grp_user_list);\n\n      \n\n      const grp_multisig_address=await OnCreate({owners:create_grp_user_list});\n      console.log(grp_multisig_address);\n\n      const { data } = await axios.post(\n        `https://sake-backend.onrender.com/api/chat/group`,\n        {\n          name: groupChatName,\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\n          grp_multisig_address:grp_multisig_address\n        },\n        config\n      );\n      setChats([data, ...chats]);\n      onClose();\n      toast({\n        title: \"New Group Chat Created!\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Failed to Create the Chat!\",\n        description: error.response.data,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <span onClick={onOpen}>{children}</span>\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            Create Group Chat\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <FormControl>\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add Users eg: John, Piyush, Jane\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\n              {selectedUsers.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  handleFunction={() => handleDelete(u)}\n                />\n              ))}\n            </Box>\n            {loading ? (\n              // <ChatLoading />\n              <div>Loading...</div>\n            ) : (\n              searchResult\n                ?.slice(0, 4)\n                .map((user) => (\n                  <UserListItem\n                    key={user._id}\n                    user={user}\n                    handleFunction={() => handleGroup(user)}\n                  />\n                ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\n              Create Chat\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default GroupChatModal;\n","import { AddIcon } from \"@chakra-ui/icons\";\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { getSender } from \"../config/ChatLogics\";\nimport ChatLoading from \"./ChatLoading\";\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport { Button } from \"@chakra-ui/button\";\nimport { useDisclosure } from \"@chakra-ui/hooks\";\nimport { Input } from \"@chakra-ui/input\";\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerContent,\n  DrawerHeader,\n  DrawerOverlay,\n} from \"@chakra-ui/modal\";\nimport { useHistory } from \"react-router-dom\";\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport UserListItem from \"./userAvatar/UserListItem\";\nimport { HiUserGroup } from \"react-icons/hi\";\n\nconst MyChats = ({ fetchAgain }) => {\n  const [loggedUser, setLoggedUser] = useState();\n\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\n\n  const toast = useToast();\n\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [loadingChat, setLoadingChat] = useState(false);\n\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const history = useHistory();\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"userInfo\");\n    history.push(\"/\");\n  };\n\n  const handleSearch = async () => {\n    if (!search) {\n      toast({\n        title: \"Please Enter something in search\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top-left\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(`https://sake-backend.onrender.com/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const accessChat = async (userId) => {\n    console.log(userId);\n\n    try {\n      setLoadingChat(true);\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(`https://sake-backend.onrender.com/api/chat`, { userId }, config);\n\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\n      setSelectedChat(data);\n      setLoadingChat(false);\n      onClose();\n    } catch (error) {\n      toast({\n        title: \"Error fetching the chat\",\n        description: error.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const fetchChats = async () => {\n    // console.log(user._id);\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(\"https://sake-backend.onrender.com/api/chat\", config);\n      setChats(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the chats\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  useEffect(async() => {\n    const result=await JSON.parse(localStorage.getItem(\"userInfo\"))\n    console.log(result);\n    setLoggedUser(result);\n    fetchChats();\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\n      flexDir=\"column\"\n      alignItems=\"center\"\n      p={3}\n      bg=\"rgb(54,57,62)\"\n      w={{ base: \"100%\", md: \"32%\" }}\n      className={\"font1\"}\n    >\n      <Box\n        pb={3}\n        px={3}\n        fontSize={{ base: \"28px\", md: \"30px\" }}\n        fontFamily=\"Work sans\"\n        d=\"flex\"\n        w=\"100%\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        color=\"white\"\n      >\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\n          <Button\n            variant=\"ghost\"\n            onClick={onOpen}\n            _hover={{ bg: \"#e2b2ff\", color: \"black\" }}\n          >\n            <i className=\"fas fa-search\"></i>\n            <Text d={{ base: \"none\", md: \"flex\" }} px={4} className={\"font1\"}>\n              Search User\n            </Text>\n          </Button>\n        </Tooltip>\n        <GroupChatModal>\n          <Button\n            d=\"flex\"\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\n            backgroundColor=\"rgb(40,43,48)\"\n            _hover={{ bg: \"#e2b2ff\", color: \"black\" }}\n          >\n            <HiUserGroup />\n            &ensp;+\n          </Button>\n        </GroupChatModal>\n      </Box>\n      <Box\n        d=\"flex\"\n        flexDir=\"column\"\n        p={3}\n        bg=\"rgb(54,57,62)\"\n        w=\"100%\"\n        h=\"100%\"\n        borderRadius=\"lg\"\n        overflowY=\"hidden\"\n      >\n        {chats ? (\n          <Stack overflowY=\"scroll\">\n            {chats.map((chat) => (\n              <Box\n                onClick={() => setSelectedChat(chat)}\n                cursor=\"pointer\"\n                bg={selectedChat === chat ? \"#e2b2ff\" : \"rgb(40,43,48)\"}\n                color={selectedChat === chat ? \"black\" : \"white\"}\n                px={3}\n                py={2}\n                borderRadius=\"lg\"\n                key={chat._id}\n                _hover={{ bg: \"#e2b2ff;\", color: \"black\" }}\n              >\n                <Text>\n                  {!chat.isGroupChat? (\n                    getSender(loggedUser, chat.users).substring(0, 8) +\n                    \".....\" +\n                    getSender(loggedUser, chat.users).substring(\n                      getSender(loggedUser, chat.users).length - 5\n                    )\n                 \n                  ) : (\n                    <div style={{\"display\":\"flex\",justifyContent:\"space-between\"}}>\n                      {chat.chatName}\n                      {/* <HiUserGroup /> */}\n                      <p style={{color:\"#e2b2ff\"}}>#grp</p>\n                    </div>\n                  )}\n                </Text>\n                {chat.latestMessage &&\n                  (!chat.isGroupChat ? (\n                    <Text fontSize=\"xs\" color={\"gray\"}>\n                      {chat.latestMessage.content.length > 50\n                        ? chat.latestMessage.content.substring(0, 51) + \"...\"\n                        : chat.latestMessage.content}\n                    </Text>\n                  ) : (\n                    <Text fontSize=\"xs\" color={\"gray\"}>\n                      <b>{chat.latestMessage.sender.name} : </b>\n                      {chat.latestMessage.content.length > 50\n                        ? chat.latestMessage.content.substring(0, 51) + \"...\"\n                        : chat.latestMessage.content}\n                    </Text>\n                  ))}\n              </Box>\n            ))}\n          </Stack>\n        ) : (\n          <ChatLoading />\n        )}\n      </Box>\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen} >\n        <DrawerOverlay />\n        <DrawerContent\n          bg=\"blackAlpha.400\"\n          backdropFilter=\"auto\"\n          backdropBlur=\"6px\"\n          color=\"white\"\n          className={\"font1\"}\n        >\n          <DrawerHeader>Search Users</DrawerHeader>\n          <DrawerBody>\n            <Box d=\"flex\" pb={2}>\n              <Input\n                placeholder=\"Search by wallet address\"\n                mr={2}\n                value={search}\n                onChange={(e) => setSearch(e.target.value)}\n                _focus={{ borderColor: \"#e2b2ff;\" }}\n              />\n              <Button\n                onClick={handleSearch}\n                bg=\"white\"\n                color=\"black\"\n                _hover={{ bg: \"#77fcc7\" }}\n              >\n                Go\n              </Button>\n            </Box>\n            {loading ? (\n              <ChatLoading />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => accessChat(user._id)}\n                />\n              ))\n            )}\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n    </Box>\n  );\n};\n\nexport default MyChats;\n","export default __webpack_public_path__ + \"static/media/logo.de8f68e7.png\";","export default __webpack_public_path__ + \"static/media/profile.18ff7229.png\";","import { React } from \"react\";\n\nconst Noti = (props) => {\n  return <div\n  style={{\n    borderRadius: \"20px\",\n    padding: \"5px 15px\",\n    color: \"white\",\n    background: \"rgb(40,43,48)\",\n    margin:\"auto\",\n    marginTop: \"10px\",\n    marginBottom: \"10px\",\n    fontSize: \"10px\",\n    width:\"90%\"\n  }}\n>\n  <p class=\"payment_user\">sender:{props.sender}</p>\n  <p class=\"payment_user\">{props.title}</p>\n  <p class=\"payment_user\">{props.body}</p>\n  \n  \n</div>\n};\n\nexport default Noti;\n","async function FetchNoti(address) {\n  const resp = await fetch(\n    \"https://backend-staging.epns.io/apis/v1/users/eip155:80001:\" +\n      address +\n      \"/feeds?spam=true\"\n  );\n  const json = await resp.json();\n  console.log(json);\n\n  //   const res = await response.json();\n  //const stringifiedResponse = JSON.stringify(json);\n  //const hlo = JSON.parse(stringifiedResponse);\n  //const notification = hlo.feeds[0].payload.notification.body;\n  // const title = notification.title;\n  //const body = notification.body;\n\n  \n  return json;\n}\n\nexport default FetchNoti;\n","import { Button } from \"@chakra-ui/button\";\nimport { useDisclosure } from \"@chakra-ui/hooks\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport img from \"./profile.png\";\nimport { FaUser } from \"react-icons/fa\";\nimport img1 from \"../../logo.png\";\nimport Noti from \"./Noti\";\nimport {\n  Menu,\n  MenuButton,\n  MenuDivider,\n  MenuItem,\n  MenuList,\n} from \"@chakra-ui/menu\";\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerContent,\n  DrawerHeader,\n  DrawerOverlay,\n} from \"@chakra-ui/modal\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\nimport { Avatar } from \"@chakra-ui/avatar\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport ChatLoading from \"../ChatLoading\";\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport ProfileModal from \"./ProfileModal\";\nimport NotificationBadge from \"react-notification-badge\";\nimport { Effect } from \"react-notification-badge\";\nimport { getSender } from \"../../config/ChatLogics\";\nimport UserListItem from \"../userAvatar/UserListItem\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport FetchNoti from \"../../contracts/frontend-interaction/FetchNoti\";\n\nfunction SideDrawer() {\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [loadingChat, setLoadingChat] = useState(false);\n\n  const {\n    setSelectedChat,\n    user,\n    notification,\n    setNotification,\n    chats,\n    setChats,\n  } = ChatState();\n\n  const toast = useToast();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const history = useHistory();\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"userInfo\");\n    localStorage.removeItem(\"address\");\n    history.push(\"/\");\n  };\n\n  const handleSearch = async () => {\n    if (!search) {\n      toast({\n        title: \"Please Enter something in search\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top-left\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(`https://sake-backend.onrender.com/api/user?search=${search}`, config);\n\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const accessChat = async (userId) => {\n    console.log(userId);\n\n    try {\n      setLoadingChat(true);\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(`https://sake-backend.onrender.com/api/chat`, { userId }, config);\n\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\n      setSelectedChat(data);\n      setLoadingChat(false);\n      onClose();\n    } catch (error) {\n      toast({\n        title: \"Error fetching the chat\",\n        description: error.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const [notification2, setNotification2] = useState([]);\n\n  return (\n    <>\n      <Box\n        d=\"flex\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        bg=\"rgb(30,33,36)\"\n        w=\"100%\"\n        p=\"5px 10px 5px 10px\"\n        color=\"white\"\n        className=\"font1\"\n      >\n        {/* <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\n          <Button\n            variant=\"ghost\"\n            onClick={onOpen}\n            _hover={{ bg: \"rgb(3, 252, 173);\", color: \"black\" }}\n          >\n            <i className=\"fas fa-search\"></i>\n            <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\n              Search User\n            </Text>\n          </Button>\n        </Tooltip> */}\n        <img\n          src={img1}\n          style={{\n            width: \"100px\",\n            height: \"100px\",\n            objectFit: \"cover\",\n            position: \"absolute\",\n            top: \"-18px\",\n            left: \"0px\",\n          }}\n        ></img>\n        <Text fontSize=\"2xl\" fontFamily=\"Work sans\">\n          {/* Talk-A-Tive */}\n        </Text>\n        <div>\n          <Menu>\n            <MenuButton\n              p={1}\n              onClick={async() => {\n                const result = await FetchNoti(localStorage.getItem(\"address\"));\n                const temp = result.feeds.map((d) => {\n                  return (\n                    <Noti\n                      sender={d.sender}\n                      body={d.payload.notification.body}\n                      title={d.payload.notification.title}\n                    ></Noti>\n                  );\n                });\n                setNotification2(temp);\n              }}\n            >\n              <NotificationBadge\n                count={notification.length}\n                effect={Effect.SCALE}\n              />\n              <BellIcon fontSize=\"2xl\" m={1} />\n            </MenuButton>\n            <MenuList\n              pl={2}\n              zIndex={\"10001\"}\n              _hover={{ bg: \"rgb(3, 252, 173);\", color: \"black\" }}\n              bg=\"rgb(30,33,36)\"\n              border={\"0px\"}\n              color={\"white\"}\n            >\n              {!notification2.length && \"No New Messages\"}\n              {notification2}\n            </MenuList>\n          </Menu>\n          {/* <Menu>\n            <MenuButton p={1}>\n              <NotificationBadge\n                count={notification.length}\n                effect={Effect.SCALE}\n              />\n              <BellIcon fontSize=\"2xl\" m={1} />\n            </MenuButton>\n            <MenuList\n              pl={2}\n              zIndex={\"10001\"}\n              _hover={{ bg: \"rgb(3, 252, 173);\", color: \"black\" }}\n              bg=\"rgb(30,33,36)\"\n              border={\"0px\"}\n              color={\"white\"}\n            >\n              {!notification.length && \"No New Messages\"}\n              {notification.map((notif) => (\n                <MenuItem\n                  key={notif._id}\n                  onClick={() => {\n                    setSelectedChat(notif.chat);\n                    setNotification(notification.filter((n) => n !== notif));\n                  }}\n                >\n                  {notif.chat.isGroupChat\n                    ? `New Message in ${notif.chat.chatName}`\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\n                </MenuItem>\n              ))}\n            </MenuList>\n          </Menu> */}\n          <Menu>\n            <MenuButton\n              as={Button}\n              rightIcon={<ChevronDownIcon />}\n              _hover={{ bg: \"rgb(3, 252, 173);\", color: \"black\" }}\n              bg=\"rgb(30,33,36)\"\n              border={\"0px\"}\n            >\n              <FaUser />\n            </MenuButton>\n            <MenuList bg=\"rgb(66,69,73)\" border={\"0px\"} zIndex={\"10001\"}>\n              <ProfileModal user={user}>\n                <MenuItem\n                  _hover={{ bg: \"rgb(3, 252, 173);\", color: \"black\" }}\n                  _focus={{ bg: \"rgb(3, 252, 173);\", color: \"black\" }}\n                  border={\"0px\"}\n                >\n                  My Profile\n                </MenuItem>{\" \"}\n              </ProfileModal>\n              <MenuDivider />\n              <MenuItem\n                onClick={logoutHandler}\n                _hover={{ bg: \"rgb(3, 252, 173);\", color: \"black\" }}\n                _focus={{ bg: \"rgb(3, 252, 173);\", color: \"black\" }}\n                border={\"0px\"}\n              >\n                Logout\n              </MenuItem>\n            </MenuList>\n          </Menu>\n        </div>\n      </Box>\n\n      {/* <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\n          <DrawerBody>\n            <Box d=\"flex\" pb={2}>\n              <Input\n                placeholder=\"Search by name or email\"\n                mr={2}\n                value={search}\n                onChange={(e) => setSearch(e.target.value)}\n              />\n              <Button onClick={handleSearch}>Go</Button>\n            </Box>\n            {loading ? (\n              <ChatLoading />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => accessChat(user._id)}\n                />\n              ))\n            )}\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer> */}\n    </>\n  );\n}\n\nexport default SideDrawer;\n","import { Box } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport Chatbox from \"../components/Chatbox\";\nimport MyChats from \"../components/MyChats\";\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatpage = (props) => {\n  const [fetchAgain, setFetchAgain] = useState(false);\n  const { user } = ChatState();\n\n  return (\n    <div style={{ width: \"100%\",overflow:\"hidden\"}} >\n      {user && <SideDrawer />}\n      <Box d=\"flex\" w=\"97%\" h=\"91.5vh\" margin={\"auto\"} borderRadius={\"20px\"} overflow=\"hidden\" >\n        {user && <MyChats fetchAgain={fetchAgain} />}\n        {user && (\n          <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} Moralis={props.Moralis} EvmChain={props.EvmChain}/>\n        )}\n      </Box>\n    </div>\n  );\n};\n\nexport default Chatpage;\n","import \"./App.css\";\nimport Homepage from \"./Pages/Homepage\";\nimport { Route } from \"react-router-dom\";\nimport Chatpage from \"./Pages/Chatpage\";\nimport { useEffect } from \"react\";\n\nfunction App() {\n  const Moralis = require(\"moralis\").default;\n  const { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\n  useEffect(async () => {\n    await Moralis.start({\n      apiKey:\n        \"KbdbJsvE5jGcuXLs6X37RMF7z6eW07l9IA8gx2ahPT9FYGCUhEffWRY8DRr9lyQ7\",\n    });\n  }, []);\n//\"T5yjNDWdaF7Re1aS1kTgLl4cVWdFjiCx1cY1NVgxJtr7wQox2N1xdJXXV2DfamTB\"\n\n  return (\n    <div className=\"App\">\n      <Route path=\"/\" component={Homepage} exact />\n      <Route path=\"/chats\">\n        <Chatpage Moralis={Moralis} EvmChain={EvmChain} />\n      </Route>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport ChatProvider from \"./Context/ChatProvider\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <ChakraProvider>\n    <BrowserRouter>\n      <ChatProvider>\n        <App />\n      </ChatProvider>\n    </BrowserRouter>\n  </ChakraProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}